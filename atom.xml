<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZY&#39;s Blog</title>
  <subtitle>Young for you.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-07T14:41:44.139Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Z Yong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>七牛云图床外链失效之解决办法</title>
    <link href="http://yoursite.com/2019/01/07/%E4%B8%83%E7%89%9B%E4%BA%91%E5%9B%BE%E5%BA%8A%E5%A4%96%E9%93%BE%E5%A4%B1%E6%95%88%E4%B9%8B%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://yoursite.com/2019/01/07/七牛云图床外链失效之解决办法/</id>
    <published>2019-01-07T13:18:15.000Z</published>
    <updated>2019-01-07T14:41:44.139Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h4><p>前段时间发现博客中的图片外链全都失效了，原因是使用的七牛云的测试域名被收回，然而打开控制平台发现图片无法直接下载，参考网上的博客成功找回，于是便记录下来。</p>
<h4 id="具体找回步骤"><a href="#具体找回步骤" class="headerlink" title="具体找回步骤"></a>具体找回步骤</h4><h6 id="下载小工具"><a href="#下载小工具" class="headerlink" title="下载小工具"></a>下载小工具</h6><p>首先需要下载七牛云提供的一个小工具 <a href="https://developer.qiniu.com/kodo/tools/1300/qrsctl" target="_blank" rel="external">qrsctl</a>，我下载的是 windows版本，链接中包含教程和具体的用法。</p>
<p>下载完成后的文件名为：<strong>qrsctl-v3.2.20170501</strong>，最好放在一个新建的文件夹中操作。</p>
<h5 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h5><p>下载完成后，需要登录。打开cmd，进入到指定的文件夹即 qrsctl 工具存放的文件夹，输入如下命令<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">qrsctl-v3.2.20170501 login <span class="tag">&lt;<span class="name">七牛云账号</span>&gt;</span> <span class="tag">&lt;<span class="name">七牛云密码</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h5 id="查看Buckets"><a href="#查看Buckets" class="headerlink" title="查看Buckets"></a>查看Buckets</h5><p>登录之后输入如下命令查看所有的 Buckets<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">qrsctl-v3</span><span class="selector-class">.2</span><span class="selector-class">.20170501</span> <span class="selector-tag">buckets</span></div></pre></td></tr></table></figure></p>
<p><img src="https://s2.ax1x.com/2019/01/05/F7id4x.jpg" alt="image"></p>
<p>我这里只有一个存放图片的 Buckets 名为： pictures </p>
<h5 id="查看所有图片"><a href="#查看所有图片" class="headerlink" title="查看所有图片"></a>查看所有图片</h5><p>查看该 pictures 下面的所有图片，注意替换 Buckets 名称<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">qrsctl-v3<span class="number">.2</span><span class="number">.20170501</span> listprefix pictures <span class="string">""</span></div></pre></td></tr></table></figure></p>
<p><img src="https://s2.ax1x.com/2019/01/05/F7iaU1.jpg" alt="image"></p>
<h5 id="下载图片"><a href="#下载图片" class="headerlink" title="下载图片"></a>下载图片</h5><p>通过以下命令可下载图片，注意替换 Buckets 和图片名称<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">qrsctl-v3</span><span class="selector-class">.2</span><span class="selector-class">.20170501</span> <span class="selector-tag">get</span> <span class="selector-tag">pictures</span> <span class="selector-tag">path</span><span class="selector-class">.png</span> <span class="selector-tag">path</span><span class="selector-class">.png</span></div></pre></td></tr></table></figure></p>
<p><img src="https://s2.ax1x.com/2019/01/05/F7iUER.jpg" alt="image"><br>执行完成后，该图片就会下载到当前文件夹中，当然也可以指定存放文件的路径。</p>
<h5 id="批量下载"><a href="#批量下载" class="headerlink" title="批量下载"></a>批量下载</h5><p>由于图片上百张，一张一张下载图片太麻烦，因此用 Java 写了个小程序批量下载。实现代码如下：</p>
<h5 id="实现代码（Java）"><a href="#实现代码（Java）" class="headerlink" title="实现代码（Java）"></a>实现代码（Java）</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class RecoverPictures &#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">        recover();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> recover() &#123;</div><div class="line"></div><div class="line">        <span class="keyword">String</span> listPic = <span class="string">"qrsctl-v3.2.20170501 listprefix pictures \"\" "</span>;  <span class="comment">//注意 pictures 是 buckets名称</span></div><div class="line">        <span class="keyword">String</span> downloadPic = <span class="string">"qrsctl-v3.2.20170501 get pictures "</span>;</div><div class="line">        <span class="keyword">String</span> picPath = <span class="string">"D:\\Tools\\picc"</span>;  <span class="comment">//存放图片的目录</span></div><div class="line">        Runtime runtime = Runtime.getRuntime();</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="built_in">try</span> &#123;</div><div class="line">            <span class="keyword">String</span>[] command = &#123;<span class="string">"cmd"</span>, <span class="string">"/c"</span>, listPic&#125;;</div><div class="line">            <span class="built_in">Process</span> <span class="built_in">process</span> = runtime.exec(command, null, <span class="keyword">new</span> <span class="built_in">File</span>(<span class="string">"D:\\Tools"</span>));  <span class="comment">//在指定的目录下执行命令</span></div><div class="line">            InputStream in = <span class="built_in">process</span>.getInputStream();</div><div class="line">            InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(in);</div><div class="line">            BufferedReader <span class="built_in">buffer</span> = <span class="keyword">new</span> BufferedReader(isr);</div><div class="line">            <span class="keyword">String</span> <span class="built_in">line</span> = null;</div><div class="line">            <span class="built_in">while</span>( (<span class="built_in">line</span> = <span class="built_in">buffer</span>.readLine()) != null ) &#123;</div><div class="line">                <span class="built_in">if</span>(<span class="string">"marker:  "</span>.equals(<span class="built_in">line</span>)) &#123;<span class="built_in">continue</span>;&#125;  <span class="comment">//第一行去除</span></div><div class="line">                i++;</div><div class="line">                System.out.<span class="built_in">println</span>(<span class="built_in">line</span>);</div><div class="line"></div><div class="line">                <span class="comment">//循环下载每张图片至指定的文件夹</span></div><div class="line">                <span class="keyword">String</span> downloadCmd = downloadPic + <span class="built_in">line</span> + <span class="string">" "</span> + picPath + <span class="string">"\\"</span> + <span class="built_in">line</span>;  <span class="comment">//下载图片命令</span></div><div class="line">                <span class="keyword">String</span>[] command2 = &#123;<span class="string">"cmd"</span>, <span class="string">"/c"</span>, downloadCmd&#125;;</div><div class="line">                runtime.exec(command2, null, <span class="keyword">new</span> <span class="built_in">File</span>(<span class="string">"D:\\Tools"</span>));</div><div class="line"></div><div class="line">                <span class="comment">//休眠 1s, 防止程序执行过快丢失图片</span></div><div class="line">                Thread.sleep(<span class="number">1000</span>);</div><div class="line">            &#125;</div><div class="line">            System.out.<span class="built_in">println</span>(<span class="string">"共下载图片总数："</span> + i );</div><div class="line">        &#125; <span class="built_in">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="built_in">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://s2.ax1x.com/2019/01/05/F7itb9.jpg" alt="image"></p>
<p>程序执行完成后，发现实际下载的图片数量不对，缺失了几张，仔细检查后发现：<strong>有的图片文件名中带有空格，导致下载失败。</strong><br><strong>解决办法：文件名添加双引号！</strong><br>如下：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">qrsctl</span>-<span class="built_in">v3</span>.<span class="number">2</span>.<span class="number">20170501</span> <span class="meta">get</span> pictures <span class="string">"parallel old.png"</span>  <span class="string">"parallel old.png"</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h4&gt;&lt;p&gt;前段时间发现博客中的图片外链全都失效了，原因是使用的七牛云的测试域名被收回，然而打开控制平台发现图片无法直接下载，参考网上的博客成功找回，于
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="七牛云，图床外链失效" scheme="http://yoursite.com/tags/%E4%B8%83%E7%89%9B%E4%BA%91%EF%BC%8C%E5%9B%BE%E5%BA%8A%E5%A4%96%E9%93%BE%E5%A4%B1%E6%95%88/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之适配器模式</title>
    <link href="http://yoursite.com/2019/01/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/01/05/设计模式之适配器模式/</id>
    <published>2019-01-05T14:12:12.000Z</published>
    <updated>2019-01-06T08:25:44.505Z</updated>
    
    <content type="html"><![CDATA[<h4 id="适配器模式定义"><a href="#适配器模式定义" class="headerlink" title="适配器模式定义"></a>适配器模式定义</h4><p><strong>将一个类的接口转换为另一个接口，以满足特定场景的需要。</strong><br>举个栗子，比如三孔插头通过一个转换头转换为两孔插头；比如通过转接线将普通耳机接口转换为苹果方孔耳机接口等。</p>
<p><strong>适配器模式允许通常因为接口不兼容而不能在一起工作的类相互配合完成工作。</strong></p>
<h5 id="适配器模式类图"><a href="#适配器模式类图" class="headerlink" title="适配器模式类图"></a>适配器模式类图</h5><p><img src="https://s2.ax1x.com/2019/01/05/F7su6I.png" alt="F7su6I.png"></p>
<p>可以看到适配器模式包含以下角色：  </p>
<ul>
<li><strong>Target：目标接口，即用户所需的接口。</strong></li>
<li><strong>Adaptee：适配者类，即被适配的角色，是一个已经存在的接口，其中有用户需要的方法。</strong></li>
<li><strong>Adapter：适配器类，可以理解为转换器，通过它调用另一个接口（Adaptee）完成适配，是适配器模式的核心。</strong></li>
</ul>
<p>适配器模式分为类适配器和对象适配器两种。以上类图为对象适配器类图。</p>
<h5 id="类适配器"><a href="#类适配器" class="headerlink" title="类适配器"></a>类适配器</h5><p><strong>类适配器的重点是通过继承 Adaptee类来构造一个适配器。</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//目标接口</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Target</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//普通目标类，只有普通方法</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonTarget</span> <span class="keyword">implements</span> <span class="title">Target</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"我是一个普通方法"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//适配者类，拥有特殊方法</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">specialRequest</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"我是一个特殊方法"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//适配器类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Adaptee</span> <span class="keyword">implements</span> <span class="title">Target</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.specialRequest();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//测试类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassAdapter</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">//通过普通类调用普通方法</span></div><div class="line">        Target commonTarget = <span class="keyword">new</span> CommonTarget();</div><div class="line">        commonTarget.request();</div><div class="line"></div><div class="line">        <span class="comment">//通过适配器类调用特殊方法</span></div><div class="line">        Target target = <span class="keyword">new</span> Adapter();</div><div class="line">        target.request();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h5><p><strong>对象适配器的重点是通过组合的方式，包含一个Adaptee类对象来构造一个适配器。</strong></p>
<p>以普通圆孔耳机借助转换头转换为苹果手机可以使用的方孔耳机为例。<br>场景：想用苹果手机听歌，但是没有方孔耳机，同学有一个普通圆孔耳机，怎么办？通过适配器模式生成一个转接头就可以听歌啦。来看代码实现：</p>
<h6 id="方孔耳机，即客户所需接口Target（SquareEar接口）"><a href="#方孔耳机，即客户所需接口Target（SquareEar接口）" class="headerlink" title="方孔耳机，即客户所需接口Target（SquareEar接口）"></a>方孔耳机，即客户所需接口Target（SquareEar接口）</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleSquareEar</span> <span class="keyword">implements</span> <span class="title">SquareEar</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">square</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"一个苹果方孔耳机"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SquareEar</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">square</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="普通圆孔耳机，即适配者Adaptee类"><a href="#普通圆孔耳机，即适配者Adaptee类" class="headerlink" title="普通圆孔耳机，即适配者Adaptee类"></a>普通圆孔耳机，即适配者Adaptee类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonRoundEar</span> <span class="keyword">implements</span> <span class="title">RoundEar</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">round</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"一个普通圆孔耳机"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RoundEar</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">round</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="转接头，即-Adapter-适配器类（核心），持有Adaptee类"><a href="#转接头，即-Adapter-适配器类（核心），持有Adaptee类" class="headerlink" title="转接头，即 Adapter 适配器类（核心），持有Adaptee类"></a>转接头，即 Adapter 适配器类（核心），持有Adaptee类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EarAdapter</span> <span class="keyword">implements</span> <span class="title">SquareEar</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> RoundEar roundEar; <span class="comment">//持有Adaptee类</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EarAdapter</span><span class="params">(RoundEar roundEar)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.roundEar = roundEar;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">square</span><span class="params">()</span> </span>&#123;</div><div class="line">        roundEar.round();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="苹果手机，我需要方孔耳机才能听歌！"><a href="#苹果手机，我需要方孔耳机才能听歌！" class="headerlink" title="苹果手机，我需要方孔耳机才能听歌！"></a>苹果手机，我需要方孔耳机才能听歌！</h6><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class ApplePhone &#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line"></div><div class="line">        <span class="comment">//假如我有方孔耳机，那么我可以直接拿来听歌</span></div><div class="line">        SquareEar squareEar = <span class="keyword">new</span> AppleSquareEar();</div><div class="line">        <span class="built_in">listen</span>(squareEar);</div><div class="line"></div><div class="line">        <span class="comment">//假如我没有方孔耳机，借助转换器，通过同学的圆孔耳机，我也可以听歌呀</span></div><div class="line">        RoundEar roundEar = <span class="keyword">new</span> CommonRoundEar();</div><div class="line">        EarAdapter earAdapter = <span class="keyword">new</span> EarAdapter(roundEar);</div><div class="line">        <span class="built_in">listen</span>(earAdapter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="built_in">listen</span>(SquareEar squareEar) &#123;</div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"我开始听歌了！我用的耳机是："</span>);</div><div class="line">        squareEar.square();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，通过适配器模式将 方孔耳机接口 和 圆孔耳机接口 这两个原本不能兼容的接口一起工作。这就是适配器模式。</p>
<h4 id="适配器模式优缺点及应用场景"><a href="#适配器模式优缺点及应用场景" class="headerlink" title="适配器模式优缺点及应用场景"></a>适配器模式优缺点及应用场景</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul>
<li>复用：现有的类可以实现功能，可以复用</li>
<li>透明：对客户端透明，因为调用的是同一接口</li>
<li>解耦：通过引入适配器类，将目标类和适配者类解耦</li>
<li>扩展性：可在适配器类中添加自己实现的业务功能，提高扩展性</li>
</ul>
<h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul>
<li>复杂性提高：过多使用适配器会使代码复杂，接口间的调用凌乱</li>
<li>类适配器一次只能适配一个适配者类，因为Java单继承</li>
<li>对象适配器不易改变适配者类的方法，需要修改源码</li>
</ul>
<h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><ul>
<li>两个类所做的事情相同或相似，但是具有不同接口的时候。</li>
<li>当使用第三方组件的时候，组件的接口和自定义的接口不同，此时又不希望修改自己的接口，可以使用适配器模式将组件的接口适配到自定义的接口。</li>
<li>想要重用现有的类，但是类的接口不符合。</li>
<li>Spring 中 AOP 模块对 BeforeAdvice、 AfterAdvice、 ThrowsAdvice 三种通知类型的支持实际上是借助适配器模式来实现的</li>
<li>Java IO 流中字节流与字符流之间的转换也用到了适配器模式</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;适配器模式定义&quot;&gt;&lt;a href=&quot;#适配器模式定义&quot; class=&quot;headerlink&quot; title=&quot;适配器模式定义&quot;&gt;&lt;/a&gt;适配器模式定义&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;将一个类的接口转换为另一个接口，以满足特定场景的需要。&lt;/strong&gt;&lt;br&gt;举个
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="设计模式，适配器模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%8C%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>多线程经典实例(二)</title>
    <link href="http://yoursite.com/2018/07/21/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%8F%E5%85%B8%E5%AE%9E%E4%BE%8B(%E4%BA%8C)/"/>
    <id>http://yoursite.com/2018/07/21/多线程经典实例(二)/</id>
    <published>2018-07-21T13:12:12.000Z</published>
    <updated>2018-07-21T06:37:00.869Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇文章<a href="http://youngforzy.top/2018/07/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%8F%E5%85%B8%E5%AE%9E%E4%BE%8B%28%E4%B8%80%29/" target="_blank" rel="external">多线程经典实例(一)</a> 讲到了几个多线程相关的例子，接下来我们来看一个经典的案例：生产者消费者问题。</p>
<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>生产者消费者问题是多线程中的一个经典问题，问题大概就是有一块缓冲区作为仓库，当仓库未满时生产者可以将产品放入仓库，当仓库未空时消费者可以从仓库取走产品。<strong>解决这个问题的核心就是处理好多线程之间的同步与协作。</strong></p>
<h4 id="生产者消费者的实现方式"><a href="#生产者消费者的实现方式" class="headerlink" title="生产者消费者的实现方式"></a>生产者消费者的实现方式</h4><p>通常有以下几种方式来实现生产者与消费者模型：</p>
<ol>
<li><strong>BlockingQueue 阻塞队列</strong></li>
<li><strong>wait()/notify()等待通知机制</strong></li>
<li><strong>Lock/Condition</strong></li>
<li><strong>管道流PipedOutputStream和PipedInputStream</strong></li>
</ol>
<h5 id="BlockingQueue实现"><a href="#BlockingQueue实现" class="headerlink" title="BlockingQueue实现"></a>BlockingQueue实现</h5><p>BlockingQueue是阻塞队列接口。它常用的几个实现如LinkedBlockingQueue、ArrayBlockingQueue等内部已经实现了同步队列，所以是线程安全的，所采用的原理是await()/singnal()方法。 </p>
<p>BlockingQueue中常见方法：</p>
<table>
<thead>
<tr>
<th>操作\情况</th>
<th>抛异常</th>
<th>特定值</th>
<th>阻塞</th>
<th>超时</th>
</tr>
</thead>
<tbody>
<tr>
<td>插入元素</td>
<td>add(e)</td>
<td>offer(e)</td>
<td><strong>put()</strong></td>
<td>offer(e,timeout,unit)</td>
<td></td>
</tr>
<tr>
<td>移除元素</td>
<td>remove(e)</td>
<td>poll()</td>
<td><strong>take()</strong></td>
<td>poll(timeout,unit)</td>
<td></td>
</tr>
<tr>
<td>检查元素</td>
<td>element()</td>
<td>peek()</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>主要用到 put() 和 take() 方法：  </p>
<p><strong>当队列已满时调用 put() 方法会自动阻塞；<br>当队列为空时调用 take() 方法会自动阻塞。</strong><br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerAndConsumer2</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> BlockingQueue repertory = <span class="keyword">new</span> <span class="type">LinkedBlockingQueue</span>();</div><div class="line">    <span class="keyword">private</span> final int SIZE = <span class="number">5</span>;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Prodecer</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Runnable</span></span> </span>&#123;</div><div class="line">        @Override</div><div class="line">        <span class="keyword">public</span> void run() &#123;</div><div class="line">            <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">1000</span>); <span class="comment">//等待一段时间</span></div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                synchronized (repertory) &#123;</div><div class="line">                    <span class="keyword">if</span> (repertory.size() == SIZE) &#123;</div><div class="line">                        System.out.println(<span class="string">"仓库已满！"</span>);</div><div class="line">                        <span class="keyword">return</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        repertory.put(<span class="keyword">new</span> <span class="type">Object</span>());</div><div class="line">                        System.out.println(<span class="string">"线程："</span> + Thread.currentThread().getName() + <span class="string">"成功生产一个产品！产品总数： "</span> + repertory.size());</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        System.out.println(<span class="string">"生产者生产失败！ "</span> + e.getMessage());</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Runnable</span></span> </span>&#123;</div><div class="line">        @Override</div><div class="line">        <span class="keyword">public</span> void run() &#123;</div><div class="line">            <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">1000</span>); <span class="comment">//等待一段时间</span></div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                synchronized (repertory) &#123;</div><div class="line">                    <span class="keyword">if</span> (repertory.isEmpty()) &#123;</div><div class="line">                        System.out.println(<span class="string">"仓库为空！"</span>);</div><div class="line">                        <span class="keyword">continue</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        Object object = repertory.take();</div><div class="line">                        System.out.println(<span class="string">"线程："</span> + Thread.currentThread().getName() + <span class="string">"成功消费一个产品！当前仓库剩余产品："</span> + repertory.size());</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        System.out.println(<span class="string">"消费者消费失败！ "</span> + e.getMessage());</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">        ProducerAndConsumer2 test = <span class="keyword">new</span> <span class="type">ProducerAndConsumer2</span>();</div><div class="line">        <span class="keyword">new</span> <span class="type">Thread</span>(test.<span class="keyword">new</span> <span class="type">Prodecer</span>()).start();</div><div class="line">        <span class="keyword">new</span> <span class="type">Thread</span>(test.<span class="keyword">new</span> <span class="type">Prodecer</span>()).start();</div><div class="line">        <span class="keyword">new</span> <span class="type">Thread</span>(test.<span class="keyword">new</span> <span class="type">Prodecer</span>()).start();</div><div class="line">        <span class="keyword">new</span> <span class="type">Thread</span>(test.<span class="keyword">new</span> <span class="type">Consumer</span>()).start();</div><div class="line">        <span class="keyword">new</span> <span class="type">Thread</span>(test.<span class="keyword">new</span> <span class="type">Consumer</span>()).start();</div><div class="line">        <span class="keyword">new</span> <span class="type">Thread</span>(test.<span class="keyword">new</span> <span class="type">Consumer</span>()).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="wait-notify-实现"><a href="#wait-notify-实现" class="headerlink" title="wait()/notify()实现"></a>wait()/notify()实现</h5><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerAndConsumer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> LinkedList repertory = <span class="keyword">new</span> <span class="type">LinkedList</span>();</div><div class="line">    <span class="keyword">private</span> final int SIZE = <span class="number">8</span>;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Prodecer</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Runnable</span></span> </span>&#123;</div><div class="line">        @Override</div><div class="line">        <span class="keyword">public</span> void run() &#123;</div><div class="line">            <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">                synchronized (repertory) &#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        Thread.sleep(<span class="number">1000</span>); <span class="comment">//等待一段时间</span></div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">while</span> (repertory.size() == SIZE) &#123;</div><div class="line">                        System.out.println(<span class="string">"仓库已满！"</span>);</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            repertory.wait(); <span class="comment">//生产者释放锁并阻塞，等待消费者消费</span></div><div class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    repertory.add(<span class="keyword">new</span> <span class="type">Object</span>());</div><div class="line">                    System.out.println(<span class="string">"线程："</span> + Thread.currentThread().getName() + <span class="string">"成功生产一个产品！产品总数： "</span> + repertory.size());</div><div class="line">                    repertory.notifyAll();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Runnable</span></span> </span>&#123;</div><div class="line">        @Override</div><div class="line">        <span class="keyword">public</span> void run() &#123;</div><div class="line">            <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">1000</span>); <span class="comment">//等待一段时间</span></div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                synchronized (repertory) &#123;</div><div class="line">                    <span class="keyword">while</span> (repertory.size() == <span class="number">0</span>) &#123;</div><div class="line">                        System.out.println(<span class="string">"仓库为空！"</span>);</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            repertory.wait();<span class="comment">//消费者释放锁并阻塞，等待生产者生产</span></div><div class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    Object object = repertory.removeLast();</div><div class="line">                    System.out.println(<span class="string">"线程："</span> + Thread.currentThread().getName() + <span class="string">"成功消费一个产品！当前仓库剩余产品："</span> + repertory.size());</div><div class="line">                    repertory.notify();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">        ProducerAndConsumer producerAndConsumer = <span class="keyword">new</span> <span class="type">ProducerAndConsumer</span>();</div><div class="line">        <span class="keyword">new</span> <span class="type">Thread</span>(producerAndConsumer.<span class="keyword">new</span> <span class="type">Prodecer</span>()).start();</div><div class="line">        <span class="keyword">new</span> <span class="type">Thread</span>(producerAndConsumer.<span class="keyword">new</span> <span class="type">Consumer</span>()).start();</div><div class="line">        <span class="keyword">new</span> <span class="type">Thread</span>(producerAndConsumer.<span class="keyword">new</span> <span class="type">Prodecer</span>()).start();</div><div class="line">        <span class="keyword">new</span> <span class="type">Thread</span>(producerAndConsumer.<span class="keyword">new</span> <span class="type">Consumer</span>()).start();</div><div class="line">        <span class="keyword">new</span> <span class="type">Thread</span>(producerAndConsumer.<span class="keyword">new</span> <span class="type">Prodecer</span>()).start();</div><div class="line">        <span class="keyword">new</span> <span class="type">Thread</span>(producerAndConsumer.<span class="keyword">new</span> <span class="type">Consumer</span>()).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">线程：Thread<span class="number">-0</span>成功生产一个产品！产品总数： <span class="number">1</span></div><div class="line">线程：Thread<span class="number">-0</span>成功生产一个产品！产品总数： <span class="number">2</span></div><div class="line">线程：Thread<span class="number">-0</span>成功生产一个产品！产品总数： <span class="number">3</span></div><div class="line">线程：Thread<span class="number">-0</span>成功生产一个产品！产品总数： <span class="number">4</span></div><div class="line">线程：Thread<span class="number">-0</span>成功生产一个产品！产品总数： <span class="number">5</span></div><div class="line">线程：Thread<span class="number">-5</span>成功消费一个产品！当前仓库剩余产品：<span class="number">4</span></div><div class="line">线程：Thread<span class="number">-1</span>成功消费一个产品！当前仓库剩余产品：<span class="number">3</span></div><div class="line">线程：Thread<span class="number">-3</span>成功消费一个产品！当前仓库剩余产品：<span class="number">2</span></div><div class="line">线程：Thread<span class="number">-4</span>成功生产一个产品！产品总数： <span class="number">3</span></div><div class="line">线程：Thread<span class="number">-4</span>成功生产一个产品！产品总数： <span class="number">4</span></div><div class="line">线程：Thread<span class="number">-4</span>成功生产一个产品！产品总数： <span class="number">5</span></div><div class="line">线程：Thread<span class="number">-4</span>成功生产一个产品！产品总数： <span class="number">6</span></div><div class="line">线程：Thread<span class="number">-4</span>成功生产一个产品！产品总数： <span class="number">7</span></div><div class="line">线程：Thread<span class="number">-2</span>成功生产一个产品！产品总数： <span class="number">8</span></div><div class="line">仓库已满！</div><div class="line">线程：Thread<span class="number">-3</span>成功消费一个产品！当前仓库剩余产品：<span class="number">7</span></div><div class="line">线程：Thread<span class="number">-1</span>成功消费一个产品！当前仓库剩余产品：<span class="number">6</span></div><div class="line">线程：Thread<span class="number">-5</span>成功消费一个产品！当前仓库剩余产品：<span class="number">5</span></div><div class="line">线程：Thread<span class="number">-2</span>成功生产一个产品！产品总数： <span class="number">6</span></div><div class="line">线程：Thread<span class="number">-2</span>成功生产一个产品！产品总数： <span class="number">7</span></div><div class="line">线程：Thread<span class="number">-2</span>成功生产一个产品！产品总数： <span class="number">8</span></div><div class="line">仓库已满！</div><div class="line">线程：Thread<span class="number">-5</span>成功消费一个产品！当前仓库剩余产品：<span class="number">7</span></div><div class="line">线程：Thread<span class="number">-1</span>成功消费一个产品！当前仓库剩余产品：<span class="number">6</span></div><div class="line">线程：Thread<span class="number">-3</span>成功消费一个产品！当前仓库剩余产品：<span class="number">5</span></div><div class="line">线程：Thread<span class="number">-2</span>成功生产一个产品！产品总数： <span class="number">6</span></div><div class="line">线程：Thread<span class="number">-5</span>成功消费一个产品！当前仓库剩余产品：<span class="number">5</span></div><div class="line">线程：Thread<span class="number">-1</span>成功消费一个产品！当前仓库剩余产品：<span class="number">4</span></div><div class="line">线程：Thread<span class="number">-3</span>成功消费一个产品！当前仓库剩余产品：<span class="number">3</span></div><div class="line">线程：Thread<span class="number">-3</span>成功消费一个产品！当前仓库剩余产品：<span class="number">2</span></div><div class="line">线程：Thread<span class="number">-5</span>成功消费一个产品！当前仓库剩余产品：<span class="number">1</span></div><div class="line">线程：Thread<span class="number">-1</span>成功消费一个产品！当前仓库剩余产品：<span class="number">0</span></div></pre></td></tr></table></figure>
<h5 id="Lock-Condition实现"><a href="#Lock-Condition实现" class="headerlink" title="Lock/Condition实现"></a>Lock/Condition实现</h5><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerAndConsumer3</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> LinkedList repertory = <span class="keyword">new</span> <span class="type">LinkedList</span>(); <span class="comment">//仓库</span></div><div class="line">    <span class="keyword">private</span> final int SIZE = <span class="number">5</span>;</div><div class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> <span class="type">ReentrantLock</span>();</div><div class="line">    <span class="keyword">private</span> Condition notFull = lock.<span class="keyword">new</span><span class="type">Condition</span>(); <span class="comment">//与生产者绑定</span></div><div class="line">    <span class="keyword">private</span> Condition notEmpty = lock.<span class="keyword">new</span><span class="type">Condition</span>();<span class="comment">//与消费者绑定</span></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Prodecer</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Runnable</span></span> </span>&#123;</div><div class="line">        @Override</div><div class="line">        <span class="keyword">public</span> void run() &#123;</div><div class="line">            <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">1000</span>); <span class="comment">//等待一段时间</span></div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                lock.lock();</div><div class="line">                <span class="keyword">try</span>&#123;</div><div class="line">                    <span class="keyword">while</span> (repertory.size() == SIZE) &#123;</div><div class="line">                        System.out.println(<span class="string">"仓库已满！"</span>);</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            notFull.await(); <span class="comment">//阻塞生产者</span></div><div class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">//仓库未满</span></div><div class="line">                    repertory.add(<span class="keyword">new</span> <span class="type">Object</span>());<span class="comment">//添加产品</span></div><div class="line">                    System.out.println(<span class="string">"线程："</span> + Thread.currentThread().getName() + <span class="string">"成功生产一个产品！产品总数： "</span> + repertory.size());</div><div class="line">                    notEmpty.signal();<span class="comment">//唤醒消费者</span></div><div class="line">                &#125; finally &#123;</div><div class="line">                    lock.unlock();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Runnable</span></span> </span>&#123;</div><div class="line">        @Override</div><div class="line">        <span class="keyword">public</span> void run() &#123;</div><div class="line">            <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">1000</span>); <span class="comment">//等待一段时间</span></div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                lock.lock();</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">while</span> (repertory.isEmpty()) &#123;</div><div class="line">                        System.out.println(<span class="string">"仓库为空！"</span>);</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            notEmpty.await();<span class="comment">//阻塞消费者</span></div><div class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">//仓库不为空</span></div><div class="line">                    Object object = repertory.removeLast(); <span class="comment">//取出产品</span></div><div class="line">                    System.out.println(<span class="string">"线程："</span> + Thread.currentThread().getName() + <span class="string">"成功消费一个产品！当前仓库剩余产品："</span> + repertory.size());</div><div class="line">                    notFull.signal();<span class="comment">//唤醒生产者</span></div><div class="line">                &#125; finally &#123;</div><div class="line">                    lock.unlock();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">        ProducerAndConsumer3 test = <span class="keyword">new</span> <span class="type">ProducerAndConsumer3</span>();</div><div class="line">        <span class="keyword">new</span> <span class="type">Thread</span>(test.<span class="keyword">new</span> <span class="type">Prodecer</span>()).start();</div><div class="line">        <span class="keyword">new</span> <span class="type">Thread</span>(test.<span class="keyword">new</span> <span class="type">Prodecer</span>()).start();</div><div class="line">        <span class="keyword">new</span> <span class="type">Thread</span>(test.<span class="keyword">new</span> <span class="type">Prodecer</span>()).start();</div><div class="line">        <span class="keyword">new</span> <span class="type">Thread</span>(test.<span class="keyword">new</span> <span class="type">Consumer</span>()).start();</div><div class="line">        <span class="keyword">new</span> <span class="type">Thread</span>(test.<span class="keyword">new</span> <span class="type">Consumer</span>()).start();</div><div class="line">        <span class="keyword">new</span> <span class="type">Thread</span>(test.<span class="keyword">new</span> <span class="type">Consumer</span>()).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="管道流PipedOutputStream和PipedInputStream"><a href="#管道流PipedOutputStream和PipedInputStream" class="headerlink" title="管道流PipedOutputStream和PipedInputStream"></a>管道流PipedOutputStream和PipedInputStream</h5><p>在Java IO 包中，PipedOutputStream和PipedInputStream分别是管道输出流和管道输入流，可以利用它们来实现多线程之间的通信。<br><strong>主要通信流程</strong>：</p>
<ol>
<li>建立输入输出流</li>
<li>绑定输入输出流</li>
<li>向缓冲区写数据</li>
<li>读取缓冲区数据  </li>
</ol>
<p><strong>原理：<br>线程A向PipedOutputStream中写入数据，这些数据会自动的发送到与PipedOutputStream对应的PipedInputStream中，进而存储在PipedInputStream的缓冲区中；此时，线程B可以读取PipedInputStream中的数据，这样就实现了线程A和线程B的通信。</strong></p>
<ul>
<li>当这个缓冲数组已满的时候，输出流PipedOutputStream所在的线程将阻塞；</li>
<li>当这个缓冲数组首次为空的时候，输入流PipedInputStream所在的线程将阻塞。</li>
<li>“管道输入流”的缓冲数组大小默认只有1024个字节。</li>
</ul>
<p>注意：这里无法实现多生产者和多消费者的场景。<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class ProducerAndConsumer4 &#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> PipedOutputStream pos = <span class="keyword">new</span> PipedOutputStream();<span class="comment">//管道输出流—生产者写数据</span></div><div class="line">    <span class="keyword">private</span> PipedInputStream pis = <span class="keyword">new</span> PipedInputStream();<span class="comment">//管道输入流-消费者读数据</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    class Prodecer implements Runnable &#123;</div><div class="line">        @Override</div><div class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">run</span>() &#123;</div><div class="line">            <span class="built_in">try</span> &#123;</div><div class="line">                <span class="built_in">while</span> (count &lt; <span class="number">5</span>) &#123; <span class="comment">//循环5次停止</span></div><div class="line">                    Thread.sleep(<span class="number">1000</span>); <span class="comment">//等待一段时间</span></div><div class="line">                    <span class="keyword">String</span> product = <span class="string">"zy的产品！"</span>;</div><div class="line">                    System.out.<span class="built_in">println</span>(<span class="string">"线程："</span> + Thread.currentThread().getName() + <span class="string">"成功生产一个产品！"</span>);</div><div class="line">                    count++;</div><div class="line">                    pos.<span class="built_in">write</span>(product.getBytes()); <span class="comment">//写入管道</span></div><div class="line">                    pos.<span class="built_in">flush</span>();</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="built_in">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125; finally &#123;</div><div class="line">                <span class="built_in">try</span> &#123;</div><div class="line">                    pos.<span class="built_in">close</span>();</div><div class="line">                &#125; <span class="built_in">catch</span> (IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    class Consumer implements Runnable &#123;</div><div class="line">        @Override</div><div class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">run</span>() &#123;</div><div class="line">            <span class="built_in">try</span> &#123;</div><div class="line">                <span class="built_in">while</span> (count &lt; <span class="number">5</span>) &#123;</div><div class="line">                    Thread.sleep(<span class="number">1000</span>); <span class="comment">//等待一段时间</span></div><div class="line">                    <span class="keyword">byte</span>[] <span class="built_in">buffer</span> = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">                    <span class="keyword">int</span> len = pis.<span class="built_in">read</span>(<span class="built_in">buffer</span>); <span class="comment">//读取管道中的数据，存入缓冲区</span></div><div class="line">                    <span class="keyword">String</span> product = <span class="keyword">new</span> <span class="keyword">String</span>(<span class="built_in">buffer</span>, <span class="number">0</span>, len);</div><div class="line">                    System.out.<span class="built_in">println</span>(<span class="string">"线程："</span> + Thread.currentThread().getName() + <span class="string">"成功消费一个产品："</span> + product);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="built_in">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125; finally &#123;</div><div class="line">                <span class="built_in">try</span> &#123;</div><div class="line">                    pis.<span class="built_in">close</span>();</div><div class="line">                &#125; <span class="built_in">catch</span> (IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">        ProducerAndConsumer4 test = <span class="keyword">new</span> ProducerAndConsumer4();</div><div class="line">        <span class="built_in">try</span> &#123;</div><div class="line">            test.pis.<span class="built_in">connect</span>(test.pos); <span class="comment">//管道连接</span></div><div class="line">        &#125; <span class="built_in">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">new</span> Thread(test.<span class="keyword">new</span> Prodecer()).start();</div><div class="line">        <span class="keyword">new</span> Thread(test.<span class="keyword">new</span> Consumer()).start();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>   除此之外，当然还有其他方式可以实现，如Semaphore。<br>以上就是实现生产者消费者的几个实例。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇文章&lt;a href=&quot;http://youngforzy.top/2018/07/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%8F%E5%85%B8%E5%AE%9E%E4%BE%8B%28%E4%B8%80%29/&quot; target=&quot;_
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>多线程经典实例(一)</title>
    <link href="http://yoursite.com/2018/07/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%8F%E5%85%B8%E5%AE%9E%E4%BE%8B(%E4%B8%80)/"/>
    <id>http://yoursite.com/2018/07/20/多线程经典实例(一)/</id>
    <published>2018-07-20T13:12:12.000Z</published>
    <updated>2018-07-20T13:23:19.698Z</updated>
    
    <content type="html"><![CDATA[<p>在多线程的学习当中，有许多经典的例子值得学习，比如售票窗口、线程交替执行、生产者消费者等。下面就来看两个有关线程交替执行的案例。</p>
<h4 id="两个线程轮流打印数字"><a href="#两个线程轮流打印数字" class="headerlink" title="两个线程轮流打印数字"></a>两个线程轮流打印数字</h4><p>这里采用 wait/notify 等待通知和 Lock/Condition 两种方式实现。</p>
<h5 id="wait-notify-实现"><a href="#wait-notify-实现" class="headerlink" title="wait()/notify()实现"></a>wait()/notify()实现</h5><p>简单介绍一下wait/notify机制的几个方法。<br>以下4个方法都必须在<strong>获取了锁的情况下</strong>才能调用：  </p>
<p><strong>wait()</strong>: 使当前线程进入阻塞等待状态，直到被唤醒或中断; 调用后立即释放已有的锁；<br><strong>wait(Long times)</strong>: 使当前线程进入阻塞等待状态一段时间，超过时间后自动唤醒；<br><strong>notify()</strong>： 唤醒在该对象上等待的一个线程；<br><strong>notifyAll()</strong>： 唤醒在该对象上等待的所有线程。  </p>
<p>释放锁的场景主要有3种：</p>
<ol>
<li><strong>执行完同步方法/代码块</strong></li>
<li><strong>执行同步方法/代码块的过程中遇到异常</strong></li>
<li><strong>执行同步方法/代码块的过程中调用了锁对象的wait()方法</strong></li>
</ol>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TurnsPrintNumber</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object <span class="keyword">lock</span> = <span class="keyword">new</span> Object(); <span class="comment">//锁</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Print</span> <span class="title">implements</span> <span class="title">Runnable</span>&#123;</div><div class="line">        @<span class="function">Override</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) &#123;</div><div class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">                synchronized (<span class="keyword">lock</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> ( i &gt; <span class="number">20</span>) &#123;</div><div class="line">                        System.<span class="keyword">out</span>.println(<span class="string">"打印完毕！"</span>);</div><div class="line">                        <span class="keyword">lock</span>.notify();</div><div class="line">                        <span class="keyword">return</span>;</div><div class="line">                    &#125;</div><div class="line">                    System.<span class="keyword">out</span>.println(<span class="string">"线程"</span> + Thread.currentThread().getName() + <span class="string">"打印："</span>  + i ++ );</div><div class="line">                    <span class="keyword">lock</span>.notify();</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        Thread.sleep(<span class="number">100</span>);</div><div class="line">                        <span class="keyword">lock</span>.wait();</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        Print print = <span class="keyword">new</span> Print();</div><div class="line">        <span class="keyword">new</span> Thread(print).start();</div><div class="line">        <span class="keyword">new</span> Thread(print).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="Lock-Condition实现"><a href="#Lock-Condition实现" class="headerlink" title="Lock/Condition实现"></a>Lock/Condition实现</h5><p><strong>对于同一个锁（Lock对象）可以创建多个Condition，以便在不同的情况下使用不同的Condition。意思就是Condition可以明确指定唤醒哪一个线程。</strong><br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">TurnsPrintNumber2</span> &#123;</span></div><div class="line"></div><div class="line">    private static ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line">    private Condition a = lock.newCondition();</div><div class="line">    private Condition b = lock.newCondition();</div><div class="line">    static int i = <span class="number">1</span>;</div><div class="line"></div><div class="line">    private <span class="literal">void</span> <span class="built_in">print</span> () &#123;</div><div class="line">        <span class="keyword">new</span> Thread<span class="function"><span class="params">(() -&gt;&#123;</span></span></div><div class="line">            <span class="keyword">while</span> (i &lt; <span class="number">20</span>) &#123;</div><div class="line">                lock.lock();</div><div class="line">                System.out.println(<span class="string">"线程1打印： "</span> + i++);</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    a.await(); <span class="regexp">//将线程1从运行状态-&gt;阻塞等待</span></div><div class="line">                    b.signal();//唤醒线程<span class="number">2</span></div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                    lock.unlock();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;).<span class="title">start</span><span class="params">()</span>;</div><div class="line"></div><div class="line">        <span class="title">new</span> <span class="title">Thread</span><span class="params">(() -&gt;&#123;</span></div><div class="line">            <span class="keyword">while</span> (i &lt; <span class="number">20</span>) &#123;</div><div class="line">                lock.lock();</div><div class="line">                System.out.println(<span class="string">"线程2打印： "</span> + i++);</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    a.signal();</div><div class="line">                    b.await();</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                    lock.unlock();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;).<span class="title">start</span><span class="params">()</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="title">public</span> <span class="title">static</span> <span class="title">void</span> <span class="title">main</span><span class="params">(String[] args)</span> &#123;</div><div class="line">        <span class="title">new</span> <span class="title">TurnsPrintNumber2</span><span class="params">()</span>.<span class="title">print</span><span class="params">()</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="三个线程轮流打印-ABC"><a href="#三个线程轮流打印-ABC" class="headerlink" title="三个线程轮流打印 ABC"></a>三个线程轮流打印 ABC</h4><p>线程1 打印 A，线程2 打印 B，线程3 打印 C， 线程1 打印 A………..</p>
<p>采用以下3种方式实现：</p>
<ol>
<li><strong>wait()/notify()方式</strong></li>
<li><strong>Lock/Condition方式</strong></li>
<li><strong>Semaphore信号量方式</strong></li>
</ol>
<h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><p><strong>要在3个线程间实现轮流打印的操作，最重要的就是要控制3个线程的执行顺序。也就是要确定等待、唤醒的顺序，所以每一个线程必须同时持有两个对象锁，才能继续执行。</strong></p>
<h5 id="wait-notify-实现-1"><a href="#wait-notify-实现-1" class="headerlink" title="wait()/notify()实现"></a>wait()/notify()实现</h5><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class TurnsPrintABCWaitNotify &#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">Object</span> alock = <span class="keyword">new</span> <span class="keyword">Object</span>();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">Object</span> block = <span class="keyword">new</span> <span class="keyword">Object</span>();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">Object</span> clock = <span class="keyword">new</span> <span class="keyword">Object</span>();</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread(() -&gt;&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (alock) &#123;  <span class="comment">//先获取 A 的锁</span></div><div class="line">                <span class="keyword">synchronized</span> (block) &#123; <span class="comment">//再获取 B 的锁</span></div><div class="line">                    System.out.<span class="built_in">println</span>(<span class="string">"线程1打印：A"</span>);</div><div class="line">                    block.notify();    <span class="comment">//唤醒 B</span></div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (i == <span class="number">5</span>)&#123;<span class="keyword">return</span>;&#125;<span class="comment">//打印5次后结束</span></div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        alock.wait();  <span class="comment">//释放 A 的锁，进入等待阻塞</span></div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread(() -&gt;&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">                <span class="keyword">synchronized</span> (block) &#123;</div><div class="line">                    <span class="keyword">synchronized</span> (clock) &#123;</div><div class="line">                        System.out.<span class="built_in">println</span>(<span class="string">"线程2打印：B"</span>);</div><div class="line">                        clock.notifyAll();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        block.wait();</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread(() -&gt;&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">                <span class="keyword">synchronized</span> (clock) &#123;</div><div class="line">                    <span class="keyword">synchronized</span> (alock) &#123;</div><div class="line">                        System.out.<span class="built_in">println</span>(<span class="string">"线程3打印：C"</span>);</div><div class="line">                        alock.notifyAll();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        clock.wait();</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="Lock-Condition实现-1"><a href="#Lock-Condition实现-1" class="headerlink" title="Lock/Condition实现"></a>Lock/Condition实现</h5><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">TurnsPrintABCLock</span> &#123;</span></div><div class="line"></div><div class="line">    private static ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line">    private Condition a = lock.newCondition();</div><div class="line">    private Condition b = lock.newCondition();</div><div class="line">    private Condition c = lock.newCondition();</div><div class="line">    int i = <span class="number">1</span>;</div><div class="line"></div><div class="line">    private <span class="literal">void</span> <span class="built_in">print</span> () &#123;</div><div class="line">        <span class="keyword">new</span> Thread<span class="function"><span class="params">(() -&gt;&#123;</span></span></div><div class="line">            <span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</div><div class="line">                lock.lock();</div><div class="line">                System.out.println(<span class="string">"线程1打印： "</span> + <span class="string">"A"</span>);</div><div class="line">                i++;</div><div class="line">                <span class="keyword">if</span> (i &gt;= <span class="number">10</span>) &#123;</div><div class="line">                    System.out.println(<span class="string">"打印完毕！"</span>);</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    b.signal(); <span class="regexp">//唤醒线程2</span></div><div class="line">                    a.await(); //将线程<span class="number">1</span>从运行状态-&gt;阻塞等待</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                    lock.unlock();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;).<span class="title">start</span><span class="params">()</span>;</div><div class="line"></div><div class="line">        <span class="title">try</span> &#123;</div><div class="line">            <span class="title">Thread</span>.<span class="title">sleep</span><span class="params">(<span class="number">100</span>)</span>;</div><div class="line">        &#125; <span class="title">catch</span> <span class="params">(InterruptedException e)</span> &#123;</div><div class="line">            <span class="title">e</span>.<span class="title">printStackTrace</span><span class="params">()</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="title">new</span> <span class="title">Thread</span><span class="params">(() -&gt;&#123;</span></div><div class="line">            <span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</div><div class="line">                lock.lock();</div><div class="line">                System.out.println(<span class="string">"线程2打印： "</span> +  <span class="string">"B"</span>);</div><div class="line">                i++;</div><div class="line">                <span class="keyword">if</span> (i &gt;= <span class="number">10</span>) &#123;</div><div class="line">                    System.out.println(<span class="string">"打印完毕！"</span>);</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    c.signal();</div><div class="line">                    b.await();</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                    lock.unlock();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;).<span class="title">start</span><span class="params">()</span>;</div><div class="line"></div><div class="line">        <span class="title">try</span> &#123;</div><div class="line">            <span class="title">Thread</span>.<span class="title">sleep</span><span class="params">(<span class="number">100</span>)</span>;</div><div class="line">        &#125; <span class="title">catch</span> <span class="params">(InterruptedException e)</span> &#123;</div><div class="line">            <span class="title">e</span>.<span class="title">printStackTrace</span><span class="params">()</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="title">new</span> <span class="title">Thread</span><span class="params">(() -&gt;&#123;</span></div><div class="line">            <span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</div><div class="line">                lock.lock();</div><div class="line">                System.out.println(<span class="string">"线程3打印： "</span> +  <span class="string">"C"</span>);</div><div class="line">                i++;</div><div class="line">                <span class="keyword">if</span> (i &gt;= <span class="number">10</span>) &#123;</div><div class="line">                    System.out.println(<span class="string">"打印完毕！"</span>);</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    a.signal();</div><div class="line">                    c.await();</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                    lock.unlock();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;).<span class="title">start</span><span class="params">()</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="title">public</span> <span class="title">static</span> <span class="title">void</span> <span class="title">main</span><span class="params">(String[] args)</span> &#123;</div><div class="line">        <span class="title">new</span> <span class="title">TurnsPrintABCLock</span><span class="params">()</span>.<span class="title">print</span><span class="params">()</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="Semaphore信号量实现"><a href="#Semaphore信号量实现" class="headerlink" title="Semaphore信号量实现"></a>Semaphore信号量实现</h5><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">TurnsPrintABCSemaphore</span> </span>&#123;</div><div class="line">    <span class="comment">// A初始信号量数量为1</span></div><div class="line">    <span class="keyword">private</span> static <span class="type">Semaphore</span> <span class="type">A</span> = <span class="keyword">new</span> <span class="type">Semaphore</span>(<span class="number">1</span>);</div><div class="line">    <span class="comment">// B、C初始信号数量为0</span></div><div class="line">    <span class="keyword">private</span> static <span class="type">Semaphore</span> <span class="type">B</span> = <span class="keyword">new</span> <span class="type">Semaphore</span>(<span class="number">0</span>);</div><div class="line">    <span class="keyword">private</span> static <span class="type">Semaphore</span> <span class="type">C</span> = <span class="keyword">new</span> <span class="type">Semaphore</span>(<span class="number">0</span>);</div><div class="line"></div><div class="line">    static <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        public void run() &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">                    <span class="type">A</span>.acquire();<span class="comment">// A获取信号执行,A信号量减1,当A为0时将无法继续获得该信号量</span></div><div class="line">                    <span class="type">System</span>.out.println(<span class="string">"线程1打印： "</span> + <span class="string">"A"</span>);</div><div class="line">                    <span class="type">B</span>.release();</div><div class="line">                    <span class="comment">//System.out.println(B.drainPermits());//B释放之后信号量加1（初始为0），可以查看到 B 的信号量为1</span></div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (<span class="type">InterruptedException</span> e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static <span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        public void run() &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">                    <span class="type">B</span>.acquire();</div><div class="line">                    <span class="type">System</span>.out.println(<span class="string">"线程2打印： "</span> + <span class="string">"B"</span>);</div><div class="line">                    <span class="type">C</span>.release();</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (<span class="type">InterruptedException</span> e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static <span class="class"><span class="keyword">class</span> <span class="title">ThreadC</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        public void run() &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">                    <span class="type">C</span>.acquire();</div><div class="line">                    <span class="type">System</span>.out.println(<span class="string">"线程3打印： "</span> + <span class="string">"C"</span>);</div><div class="line">                    <span class="type">A</span>.release();</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (<span class="type">InterruptedException</span> e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(<span class="type">String</span>[] args) <span class="keyword">throws</span> <span class="type">InterruptedException</span> &#123;</div><div class="line">        <span class="keyword">new</span> <span class="type">ThreadA</span>().start();</div><div class="line">        <span class="keyword">new</span> <span class="type">ThreadB</span>().start();</div><div class="line">        <span class="keyword">new</span> <span class="type">ThreadC</span>().start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上就是有关多个线程交替执行的例子。</p>
<h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p>如何保证线程的顺序执行？比如有a，b，c三个线程，如何保证a执行完再执行b，b执行完再执行c？</p>
<ol>
<li>Join</li>
<li>线程池（newSingleThreadExecutor）</li>
<li>CountDownLatch/Semaphore</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在多线程的学习当中，有许多经典的例子值得学习，比如售票窗口、线程交替执行、生产者消费者等。下面就来看两个有关线程交替执行的案例。&lt;/p&gt;
&lt;h4 id=&quot;两个线程轮流打印数字&quot;&gt;&lt;a href=&quot;#两个线程轮流打印数字&quot; class=&quot;headerlink&quot; title=&quot;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>深入浅出ThreadLocal的实现原理</title>
    <link href="http://yoursite.com/2018/07/02/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAThreadLocal%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/07/02/深入浅出ThreadLocal的实现原理/</id>
    <published>2018-07-02T06:12:12.000Z</published>
    <updated>2018-11-15T01:53:35.552Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ThreadLocal的简介"><a href="#ThreadLocal的简介" class="headerlink" title="ThreadLocal的简介"></a>ThreadLocal的简介</h3><p>ThreadLocal称为线程局部变量。在每个线程中都有自己独立的ThreadLocal变量。<br>每个线程中可有多个threadLocal变量。</p>
<h3 id="ThreadLocal的用法"><a href="#ThreadLocal的用法" class="headerlink" title="ThreadLocal的用法"></a>ThreadLocal的用法</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalDemo</span> &#123;</span></div><div class="line"></div><div class="line">    private static ThreadLocal&lt;Integer&gt; threadLocal1 = <span class="keyword">new</span> ThreadLocal&lt;Integer&gt;();</div><div class="line">    private static ThreadLocal&lt;String&gt; threadLocal2 = <span class="keyword">new</span> ThreadLocal&lt;String&gt;()&#123;</div><div class="line">        @Override</div><div class="line">        protected String initialValue() &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"默认值"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    public static <span class="literal">void</span> main(String[] args) &#123;</div><div class="line"></div><div class="line">        int temp = <span class="number">100</span>;</div><div class="line">        <span class="keyword">new</span> Thread<span class="function"><span class="params">(() -&gt;&#123;</span></span></div><div class="line">            threadLocal1.set(temp + <span class="number">1</span>);</div><div class="line">            threadLocal2.set(<span class="string">"线程A"</span>);</div><div class="line">            System.out.println(<span class="string">"线程:"</span> +Thread.currentThread().getName() + <span class="string">"中 threadLocal1 的值为： "</span> +  threadLocal1.get());</div><div class="line">            System.out.println(<span class="string">"线程:"</span> +Thread.currentThread().getName() + <span class="string">"中 threadLocal2 的值为： "</span> +  threadLocal2.get());</div><div class="line">        &#125;).<span class="title">start</span><span class="params">()</span>;</div><div class="line"></div><div class="line">        <span class="title">new</span> <span class="title">Thread</span><span class="params">(() -&gt;&#123;</span></div><div class="line">            threadLocal1.set(temp - <span class="number">1</span>);</div><div class="line">            System.out.println(<span class="string">"线程:"</span> +Thread.currentThread().getName() + <span class="string">"中 threadLocal1 的值为： "</span> +  threadLocal1.get());</div><div class="line">            System.out.println(<span class="string">"线程:"</span> +Thread.currentThread().getName() + <span class="string">"中 threadLocal2 的值为： "</span> + threadLocal2.get());</div><div class="line">        &#125;).<span class="title">start</span><span class="params">()</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">线程<span class="symbol">:Thread-</span><span class="number">0</span>中 threadLocal1 的值为： <span class="number">101</span></div><div class="line">线程<span class="symbol">:Thread-</span><span class="number">0</span>中 threadLocal2 的值为： 线程A</div><div class="line">线程<span class="symbol">:Thread-</span><span class="number">1</span>中 threadLocal1 的值为： <span class="number">99</span></div><div class="line">线程<span class="symbol">:Thread-</span><span class="number">1</span>中 threadLocal2 的值为： 默认值</div></pre></td></tr></table></figure></p>
<p>可以看到每个线程都保存着自己独立的变量threadLocal1、threadLocal2，互不影响。</p>
<p><strong>ThreadLocal实例通常定义成 static 变量，因此每个线程都能访问到该实例。</strong></p>
<p>抛出问题：为什么每个线程通过ThreadLocal实例时可以拿到自己设置的值？是如何实现的？</p>
<h3 id="ThreadLocal-的实现原理"><a href="#ThreadLocal-的实现原理" class="headerlink" title="ThreadLocal 的实现原理"></a>ThreadLocal 的实现原理</h3><p>ThreadLocal类主要有四个方法set()、get()、remove()、setInitialValue()，要想了解它的实现原理，那么就来看看这几个主要方法是如何实现的。</p>
<h4 id="set-方法"><a href="#set-方法" class="headerlink" title="set() 方法"></a>set() 方法</h4><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="literal">void</span> <span class="built_in">set</span>(T value) &#123;</div><div class="line">        <span class="keyword">Thread</span> t = <span class="keyword">Thread</span>.currentThread();</div><div class="line">        ThreadLocalMap <span class="built_in">map</span> = getMap(t);</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">map</span> != <span class="built_in">null</span>)</div><div class="line">            <span class="built_in">map</span>.<span class="built_in">set</span>(this, value);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            createMap(t, value);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h5 id="getMap-获取ThreadLocalMap"><a href="#getMap-获取ThreadLocalMap" class="headerlink" title="getMap(): 获取ThreadLocalMap"></a>getMap(): 获取ThreadLocalMap</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> t.threadLocals;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><strong>threadLocals变量在线程Thread类中定义：</strong><br><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ThreadLocal.ThreadLocalMap <span class="attr">threadLocals</span> = <span class="literal">null</span>;</div></pre></td></tr></table></figure></p>
<p>每个线程都有一个threadLocals变量即ThreadLocalMap对象，ThreadLocalMap类是ThreadLocal类的静态内部类，用来存储相应的值，总之就是一个Map，后面会详细讲到。</p>
<h5 id="createMap-new-一个ThreadLocalMap"><a href="#createMap-new-一个ThreadLocalMap" class="headerlink" title="createMap(): new 一个ThreadLocalMap"></a>createMap(): new 一个ThreadLocalMap</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</div><div class="line">        t.threadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>set()方法的过程如下：  </p>
<p><strong>1. 当前线程调用ThreadLocal.set()方法时，首先获取当前线程对象t;</strong>  </p>
<p><strong>2. 通过当前线程对象t获取到t线程中的threadLocals，即ThreadLocalMap</strong></p>
<ul>
<li>如果ThreadLocalMap存在，那么更新value，key为当前ThreadLocal对象;</li>
<li>如果ThreadLocalMap不存在，那么就根据当前线程对象t创建一个ThreadLocalMap，并将value存入。</li>
</ul>
<p>到这里，基本就能回答开头所提出的的问题，大体上知道了ThreadLocal的实现原理。再来看get()方法的实现。</p>
<h4 id="get-方法"><a href="#get-方法" class="headerlink" title="get() 方法"></a>get() 方法</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> T <span class="keyword">get</span>() &#123;</div><div class="line">        Thread t = Thread.currentThread();</div><div class="line">        ThreadLocalMap map = getMap(t);</div><div class="line">        <span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;</div><div class="line">            ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</div><div class="line">            <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</div><div class="line">                <span class="meta">@SuppressWarnings(<span class="meta-string">"unchecked"</span>)</span></div><div class="line">                T result = (T)e.value;</div><div class="line">                <span class="keyword">return</span> result;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> setInitialValue();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>从上面可以看到，当调用get() 方法时，实际上就是先从当前线程中获取ThreadLocalMap，然后再根据当前this对象即ThreadLocal对象来获取对应的值。如果map不存在或者this对象的key不存在，那么就返回设置的初始值。</p>
<p>到这里就可以总结一下<strong>ThreadLocal的实现原理：每个线程都有一个自己的ThreadLocalMap对象，用来存储以ThreadLocal为key、Object为值的键值对，线程与线程之间互不影响。</strong></p>
<h5 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h5><p><img src="https://s1.ax1x.com/2018/11/15/ij4gJK.png" alt="image"></p>
<h4 id="remove-方法"><a href="#remove-方法" class="headerlink" title="remove() 方法"></a>remove() 方法</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        ThreadLocalMap m = getMap(Thread.currentThread());</div><div class="line">        <span class="keyword">if</span> (m != <span class="literal">null</span>)</div><div class="line">            m.<span class="keyword">remove</span>(<span class="keyword">this</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>当ThreadLocal对象调用该方法时，获取到线程的ThreadLocalMap，移除以this对象（该ThreadLocal对象）为key的键值对。</p>
<h4 id="setInitialValue-方法"><a href="#setInitialValue-方法" class="headerlink" title="setInitialValue() 方法"></a>setInitialValue() 方法</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> T <span class="title">setInitialValue</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        T <span class="keyword">value</span> = initialValue();</div><div class="line">        Thread t = Thread.currentThread();</div><div class="line">        ThreadLocalMap map = getMap(t);</div><div class="line">        <span class="keyword">if</span> (map != <span class="literal">null</span>)</div><div class="line">            map.<span class="keyword">set</span>(<span class="keyword">this</span>, <span class="keyword">value</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            createMap(t, <span class="keyword">value</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">value</span>;</div><div class="line">    &#125;</div><div class="line"><span class="function"><span class="keyword">protected</span> T <span class="title">initialValue</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>该方法主要作用是用来返回初始值，即initialValue()中的值，默认为null，在新建ThreadLocal时可以重写该方法，设置一个初始值。</p>
<h4 id="ThreadLocalMap"><a href="#ThreadLocalMap" class="headerlink" title="ThreadLocalMap"></a>ThreadLocalMap</h4><p>前面提到，ThreadLocalMap就是存储相应变量的地方。<br>ThreadLocalMap和大多数容器一样，维护了一个内部数组，即Entry[]数组，Entey节点如下：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">static <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference&lt;ThreadLocal&lt;?&gt;&gt;</span> </span>&#123;</div><div class="line">            <span class="comment">/** The value associated with this ThreadLocal. */</span></div><div class="line">            <span class="type">Object</span> value;</div><div class="line"></div><div class="line">            <span class="type">Entry</span>(<span class="type">ThreadLocal</span>&lt;?&gt; k, <span class="type">Object</span> v) &#123;</div><div class="line">                <span class="keyword">super</span>(k);</div><div class="line">                value = v;</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>Entey是一个以ThreadLocal为key，Object为value的键值对，另外Entey继承了WeakReference（弱引用），在Entry的构造方法中，调用了super(k)方法将ThreadLocal实例包装成一个WeakReference。</p>
<h5 id="为什么使用弱引用（ThreadLocal）作为key？"><a href="#为什么使用弱引用（ThreadLocal）作为key？" class="headerlink" title="为什么使用弱引用（ThreadLocal）作为key？"></a>为什么使用弱引用（ThreadLocal）作为key？</h5><p>如果是强引用的话，ThreadLocalMap中一直会持有ThreadLocal的强引用，如果没有手动删除，那么ThreadLocal对象就无法回收，导致内存泄漏。  </p>
<p>我们知道弱引用无论内存是否足够都会被GC回收。这样当没有强引用指向ThreadLocal对象时就可以被回收，因此也就不会出现ThreadLocal对象的内存泄漏。但还是会出现另一种内存泄漏问题，见下面问题。</p>
<h5 id="为什么会引起内存泄漏？什么时候发生内存泄漏？如何防止内存泄漏？"><a href="#为什么会引起内存泄漏？什么时候发生内存泄漏？如何防止内存泄漏？" class="headerlink" title="为什么会引起内存泄漏？什么时候发生内存泄漏？如何防止内存泄漏？"></a>为什么会引起内存泄漏？什么时候发生内存泄漏？如何防止内存泄漏？</h5><p><strong>在线程的生命周期内发生内存泄漏。</strong></p>
<p><strong>我们知道ThreadLocalMap中存储的是key为ThreadLocal的引用，当这个引用失效时即为null时，那么线程中就存在ThreadLocalMap<null, value="">的键值对，此时无法获得对应的Value，于是就存在一条Thread Ref -&gt; Thread -&gt; ThreaLocalMap -&gt; Entry -&gt; Value 强引用链，无法访问到Value，因此就出现了内存泄漏的问题。</null,></strong></p>
<p>防止内存泄漏：<br><strong>1. 在ThreadLocalMap的set()、get()、remove()方法中，有一个将key为null的Entry擦除的过程，这样Entry内的value也就没有强引用链，自然会被回收。（不能保证一定擦除）</strong><br><strong>2. 当使用完毕后，显示调用remove()方法，直接清除ThreadLocalMap中以ThreadLocal对象为key的键值对;</strong></p>
<h5 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h5><p><strong>ThreadLocalMap使用开放地址法来处理Hash冲突</strong>，而不是拉链法(HashMap、concurrentHashMap)。<br>主要原因是：在ThreadLocalMap中的散列值分散的十分均匀，很少会出现冲突。并且ThreadLocalMap经常要清除无用的对象，使用纯数组更加方便。</p>
<p><strong>开放地址法</strong>：当发现有Hash冲突的时候，不会创建链表，而是继续在数组中寻找空的单元。探测数组中空单元的方式有很多，如<strong>线性探测法</strong>：从冲突的数组单元开始，依次往后搜索空单元，如果到了尾部还未找到就再从头开始查找，直到找到为止。</p>
<p>ThreadLocalMap<threadlocal,object>键值对数量为ThreadLocal的数量，一般来说ThreadLocal数量很少，相比在ThreadLocal中用Map<thread, object="">键值对存储线程变量（Thread数量一般来说比ThreadLocal数量多），性能提高很多。还有一个原因，如果是使用Map<thread, object="">的方式存储线程变量，还要考虑到增加减少线程时的并发问题。</thread,></thread,></threadlocal,object></p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul>
<li>ThreadLocal由于在每个线程中都创建了副本,因此threadLocal会占用一定的内存；是一种空间换时间的思想；  </li>
<li>threadLocal只是一个工具，封装了ThreadLocalMap对象方法的入口；</li>
<li>threadLocal可以用来解决数据库连接、Session管理等问题，在spring也有大量使用，比如HttpServletRequest也是基于ThreadLocal来实现的。</li>
<li>ThreadLocal适用于每个线程需要有自己单独的实例，并且该实例需要在多个方法中共享，但不希望被多线程共享的场景。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ThreadLocal的简介&quot;&gt;&lt;a href=&quot;#ThreadLocal的简介&quot; class=&quot;headerlink&quot; title=&quot;ThreadLocal的简介&quot;&gt;&lt;/a&gt;ThreadLocal的简介&lt;/h3&gt;&lt;p&gt;ThreadLocal称为线程局部变量。在每
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="ThreadLocal" scheme="http://yoursite.com/tags/ThreadLocal/"/>
    
      <category term="线程局部变量" scheme="http://yoursite.com/tags/%E7%BA%BF%E7%A8%8B%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>浅析Cglib动态代理</title>
    <link href="http://yoursite.com/2018/06/30/%E6%B5%85%E6%9E%90Cglib%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <id>http://yoursite.com/2018/06/30/浅析Cglib动态代理/</id>
    <published>2018-06-30T13:12:12.000Z</published>
    <updated>2018-07-22T02:42:56.479Z</updated>
    
    <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>我们知道JDK动态代理只能代理实现了接口的类，没有实现接口的类是无法通过JDK来代理的。  </p>
<p><strong>Cglib是针对类来实现代理的，它的原理是对指定的目标类生成一个子类，这个子类覆盖目标类的方法并在其中实现方法的增强。因为采用了继承和重写，因此不能对final的类、final方法进行代理。</strong></p>
<p>Cglib底层其实是借助了ASM这个非常强大的Java字节码生成框架，它可以在运行时对字节码进行修改或动态生成。</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><h5 id="目标对象"><a href="#目标对象" class="headerlink" title="目标对象"></a>目标对象</h5><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibTest</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> say (<span class="keyword">String</span> s) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"你好："</span> + s;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="MethodInterceptor的实现类"><a href="#MethodInterceptor的实现类" class="headerlink" title="MethodInterceptor的实现类"></a>MethodInterceptor的实现类</h5><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> Object intercept(Object o, <span class="function"><span class="keyword">Method</span> <span class="title">method</span>, <span class="title">Object</span>[] <span class="title">objects</span>, <span class="title">MethodProxy</span> <span class="title">methodProxy</span>) <span class="title">throws</span> <span class="title">Throwable</span> <span class="comment">&#123;</span></span></div><div class="line">    </div><div class="line">    System.out.println("调用方法前.....");</div><div class="line">    methodProxy.invokeSuper(o, objects); //调用目标对象的方法</div><div class="line">    System.out.println("调用方法后.....");</div><div class="line">    return o;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>intercept() 方法中有4个参数： </p>
<ul>
<li>o：表示目标对象</li>
<li>method：目标方法</li>
<li>objects：参数列表</li>
<li>methodProxy：表示方法的代理。invokeSuper()表示调用目标对象的方法。  </li>
</ul>
<p>实现intercept()方法有点类似于实现JDK动态代理中InvocationHandler接口中的invoke()方法，都是在该方法中添加需要被代理的逻辑。</p>
<h5 id="生成代理对象"><a href="#生成代理对象" class="headerlink" title="生成代理对象"></a>生成代理对象</h5><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</div><div class="line"></div><div class="line">        CglibProxy proxy = <span class="keyword">new</span> <span class="type">CglibProxy</span>(); <span class="comment">//MethodInterceptor的实现类</span></div><div class="line"></div><div class="line">        Enhancer enhancer = <span class="keyword">new</span> <span class="type">Enhancer</span>(); <span class="comment">//借助Enhancer对象</span></div><div class="line">        enhancer.setSuperclass(CglibTarget.class); <span class="comment">//目标对象字节码</span></div><div class="line">        enhancer.setCallback(proxy);  <span class="comment">//设置回调即MethodInterceptor的实现类</span></div><div class="line"></div><div class="line">        CglibTarget cglibTarget = (CglibTarget) enhancer.create(); <span class="comment">//生成代理对象</span></div><div class="line">        cglibTarget.say(<span class="string">"lebron"</span>); <span class="comment">//调用目标方法</span></div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>输出：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">调用方法前.....</div><div class="line">你好：lebron</div><div class="line">调用方法后.....</div></pre></td></tr></table></figure></p>
<p>简单描述Cglib代理过程：</p>
<p><strong>通过Cglib的Enhancer来指定要代理的目标对象(传入的是目标对象class对象)、实际处理代理逻辑的对象(MethodInterceptor实现类)，最终通过调用create()方法得到代理对象。</strong></p>
<p>当代理对象调用目标方法时，都会转发给MethodInterceptor.intercept()方法，在intercept()方法里我们可以加入任何代理逻辑，比如修改方法参数，加入日志功能、安全检查功能等；在intercept()方法中，通过调用MethodProxy.invokeSuper()方法，我们将调用转发给原始目标对象，在本例中也就是CglibTarget的具体方法。</p>
<h5 id="问题：如何针对不同的方法使用不同的代理逻辑？"><a href="#问题：如何针对不同的方法使用不同的代理逻辑？" class="headerlink" title="问题：如何针对不同的方法使用不同的代理逻辑？"></a>问题：如何针对不同的方法使用不同的代理逻辑？</h5><p>这里只要增加相应方法的MethodInterceptor 的实现类以及实现一个回调过滤器CallbackFilter即可完成。</p>
<p><strong>在目标对象中增加一个 record() 方法：</strong><br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CglibTarget</span> &#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span> (<span class="params">String s</span>) </span>&#123;</div><div class="line">        System.<span class="keyword">out</span>.println( <span class="string">"你好："</span> + s);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">record</span> (<span class="params">String s</span>) </span>&#123;</div><div class="line">        System.<span class="keyword">out</span>.println( <span class="string">"功能："</span> + s);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>MethodInterceptor实现类:针对调用 record() 方法的拦截，目的是记录方法调用前后的时间</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxy2</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"当前时间： "</span> + System.currentTimeMillis());</div><div class="line">        methodProxy.invokeSuper(o, objects); <span class="comment">//调用目标对象的方法</span></div><div class="line">        System.out.println(<span class="string">"运行结束时间： "</span> + System.currentTimeMillis());</div><div class="line">        <span class="keyword">return</span> o;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>拦截过滤器CallbackFilter</strong>：CallbackFilter的accept()方法返回的数值表示的是Callback[]数组的索引，Callback[]数组中的元素就是定义好的MethodInterceptor实现类。</p>
<figure class="highlight monkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFilter</span> <span class="keyword">implements</span> <span class="title">CallbackFilter</span> &#123;</span></div><div class="line"></div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> int accept(<span class="function"><span class="keyword">Method</span> <span class="title">method</span>) &#123;</span></div><div class="line">    </div><div class="line">        <span class="keyword">if</span> (<span class="string">"say"</span>.equals(<span class="function"><span class="keyword">method</span>.<span class="title">getName</span>(</span>))) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果调用的是 say()方法，那么返回0，表示采用Callback[0]也就是第一个MethodInterceptor实现类来拦截 say()方法；</p>
<p><strong>main方法测试：</strong><br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</div><div class="line"></div><div class="line">       CglibProxy proxy = <span class="keyword">new</span> <span class="type">CglibProxy</span>(); <span class="comment">//MethodInterceptor的实现类1</span></div><div class="line">       CglibProxy2 proxy2 = <span class="keyword">new</span> <span class="type">CglibProxy2</span>(); <span class="comment">//MethodInterceptor的实现类2</span></div><div class="line"></div><div class="line">       Enhancer enhancer = <span class="keyword">new</span> <span class="type">Enhancer</span>();</div><div class="line">       enhancer.setSuperclass(CglibTarget.class); <span class="comment">//目标对象字节码</span></div><div class="line">       enhancer.setCallbacks(<span class="keyword">new</span> <span class="type">Callback</span>[]&#123;proxy, proxy2&#125;);  <span class="comment">//设置回调即MethodInterceptor的实现类</span></div><div class="line">       enhancer.setCallbackFilter(<span class="keyword">new</span> <span class="type">ProxyFilter</span>()); <span class="comment">//设置方法顺序？</span></div><div class="line"></div><div class="line">       CglibTarget cglibTarget = (CglibTarget) enhancer.create(); <span class="comment">//生成代理对象</span></div><div class="line">       cglibTarget.say(<span class="string">"lebron"</span>);</div><div class="line">       cglibTarget.record(<span class="string">"记录时间"</span>);</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">调用方法前.....</div><div class="line">你好：lebron</div><div class="line">调用方法后.....</div><div class="line">当前时间： <span class="number">1532182370942</span></div><div class="line">功能：记录时间</div><div class="line">运行结束时间： <span class="number">1532182370942</span></div></pre></td></tr></table></figure></p>
<p>可见，针对say() 和 record() 这两个不同的方法实现了不同的代理逻辑。</p>
<p><strong>针对不同的方法，可以定义不同的MethodInterceptor，来实现不同的代理逻辑。</strong></p>
<h4 id="Cglib动态代理的缺点"><a href="#Cglib动态代理的缺点" class="headerlink" title="Cglib动态代理的缺点"></a>Cglib动态代理的缺点</h4><ol>
<li>对于final类、static、private、final方法，无法进行代理。</li>
<li>由于Cglib的大部分类是直接对Java字节码进行操作，这样生成的类会在Java的永久代中。如果动态代理操作过多，容易造成永久代满，触发OOM异常。</li>
</ol>
<h4 id="Cglib与JDK动态代理的区别"><a href="#Cglib与JDK动态代理的区别" class="headerlink" title="Cglib与JDK动态代理的区别"></a>Cglib与JDK动态代理的区别</h4><ol>
<li><strong>JDK动态代理只能针对接口（接口中的方法）进行代理，不能对普通的类进行代理（因为生成的代理类的父类为Proxy，Java不允许多重继承）；Cglib能够代理普通类（除final类final方法），无论有没有实现接口（如果传入的是接口，那么就实现接口）；</strong></li>
<li>JDK动态代理生成的代理类是<strong>实现目标接口的类</strong>；Cglib动态代理生成的代理类是<strong>目标类的子类</strong>。</li>
<li>JDK动态代理采用<strong>反射机制</strong>调用目标类的方法；Cglib采用<strong>类似索引的方式</strong>直接调用目标类方法（<strong>Cglib的FastClass机制：FastClass对Class对象进行特别的处理，通过数组保存method的引用，每次调用方法的时候都是通过一个index下标来保持对方法的引用。</strong>），执行效率较高；</li>
<li>Cglib代理需要引入额外的包；</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h4&gt;&lt;p&gt;我们知道JDK动态代理只能代理实现了接口的类，没有实现接口的类是无法通过JDK来代理的。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cglib是针对
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="代理模式" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Cglib动态代理" scheme="http://yoursite.com/tags/Cglib%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>JDK动态代理的实现原理浅析</title>
    <link href="http://yoursite.com/2018/06/27/jdk%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E6%B5%85%E6%9E%90/"/>
    <id>http://yoursite.com/2018/06/27/jdk动态代理的实现原理浅析/</id>
    <published>2018-06-27T06:12:12.000Z</published>
    <updated>2018-06-27T06:49:16.985Z</updated>
    
    <content type="html"><![CDATA[<h4 id="JDK动态代理简介"><a href="#JDK动态代理简介" class="headerlink" title="JDK动态代理简介"></a>JDK动态代理简介</h4><p>什么是JDK动态代理？<br>先看看代理的概念——<strong>代理：为其他对象提供一种代理以控制对这个对象的访问</strong>。  </p>
<p>代理在生活中很常见，比如买火车票可以不去火车站，而是通过代售点；想要逃课了，就让同学代签到等等。<br>说白了，就是可以通过代理来完成目标事件。（自我理解）</p>
<p>不同于静态代理直接采用编码的方式实现，JDK动态代理是<strong>利用反射机制在运行时创建代理类</strong>，进而调用相应的方法。</p>
<h4 id="JDK动态代理的使用"><a href="#JDK动态代理的使用" class="headerlink" title="JDK动态代理的使用"></a>JDK动态代理的使用</h4><p>通过一个小例子来看看如何使用JDK动态代理。</p>
<h5 id="目标接口"><a href="#目标接口" class="headerlink" title="目标接口"></a>目标接口</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public<span class="built_in"> interface </span>GameService &#123;</div><div class="line"></div><div class="line">    String beginGame(String s);</div><div class="line"></div><div class="line">    void playGame(String s);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>目标接口中定义了两个目标方法。  </p>
<h5 id="目标对象"><a href="#目标对象" class="headerlink" title="目标对象"></a>目标对象</h5><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GamePlay</span> <span class="title">implements</span> <span class="title">GameService</span> &#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">beginGame</span>(<span class="params">String name</span>) </span>&#123;</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"玩家"</span> + name + <span class="string">"进入召唤师峡谷,游戏开始！"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="string">"玩家名字是："</span> + name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span>(<span class="params">String s</span>) </span>&#123;</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"玩家说： "</span> +  s);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>目标对象是目标接口的实现，也是要被代理的对象。</p>
<h5 id="调用处理器——InvocationHandler"><a href="#调用处理器——InvocationHandler" class="headerlink" title="调用处理器——InvocationHandler"></a>调用处理器——InvocationHandler</h5><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Object <span class="keyword">target</span>;</div><div class="line"></div><div class="line">    <span class="comment">//构造方法（可传入目标对象）</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GameInvocationHandler</span><span class="params">(Object <span class="keyword">target</span>)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.<span class="keyword">target</span> = <span class="keyword">target</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function">Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        <span class="comment">//业务逻辑</span></div><div class="line">        System.out.println(<span class="string">"before-----欢迎来到——动态召唤师峡谷"</span>);</div><div class="line"> </div><div class="line">        <span class="comment">//方法的返回值（可以为空）</span></div><div class="line">        Object object = method.invoke(<span class="keyword">target</span>, args);</div><div class="line"></div><div class="line">        <span class="comment">//业务逻辑</span></div><div class="line">        System.out.println(<span class="string">"after------欢迎离开——动态召唤师峡谷"</span>);</div><div class="line">        <span class="keyword">return</span> object;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>InvocationHandler是调用处理器接口，它只定义了唯一一个 invoke() 方法，通过重写该方法可自定义代理的业务逻辑，该方法三个参数：  </p>
<ul>
<li>proxy：代理类对象（$Proxy0），在该方法中一般不会用到</li>
<li>method：被代理类调用的方法对象</li>
<li>args：方法对象中的参数</li>
</ul>
<h5 id="创建代理类对象——Proxy-newProxyInstance"><a href="#创建代理类对象——Proxy-newProxyInstance" class="headerlink" title="创建代理类对象——Proxy.newProxyInstance()"></a>创建代理类对象——Proxy.newProxyInstance()</h5><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GamePlayDynamicProxy</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</div><div class="line"></div><div class="line">        <span class="comment">//目标类（实现类）</span></div><div class="line">        GameService gameService = <span class="keyword">new</span> <span class="type">GamePlay</span>();</div><div class="line">        </div><div class="line">        <span class="comment">//调用处理器</span></div><div class="line">        InvocationHandler invocationHandler = <span class="keyword">new</span> <span class="type">GameInvocationHandler</span>(gameService);</div><div class="line"></div><div class="line">        <span class="comment">//生成代理对象</span></div><div class="line">        GameService GameServiceproxy = (GameService) Proxy.<span class="keyword">new</span><span class="type">ProxyInstance</span>(gameService.getClass().getClassLoader(),</div><div class="line">                gameService.getClass().getInterfaces(), invocationHandler);</div><div class="line"></div><div class="line">        <span class="comment">//调用方法,实际上运行的是真实类的方法（打断点可知）</span></div><div class="line">        GameServiceproxy.playGame(<span class="string">"我要超神啦！"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//beginGame()可获取返回值</span></div><div class="line">        <span class="comment">//String resultFromInvoke = GameServiceproxy.beginGame("LBJ");</span></div><div class="line">        <span class="comment">//System.out.println("InvocationHandler中的返回值：" + resultFromInvoke);</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过Proxy类的静态方法 newProxyInstance() 来创建代理类对象实例，关于其中具体的细节在下面的实现原理中将会提及。</p>
<h5 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h5><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">before</span><span class="comment">-----欢迎来到——动态召唤师峡谷</span></div><div class="line">玩家说： 我要超神啦！</div><div class="line"><span class="keyword">after</span><span class="comment">------欢迎离开——动态召唤师峡谷</span></div></pre></td></tr></table></figure>
<p>可见，通过使用动态代理，可以<strong>在目标方法中增加所需要的业务逻辑</strong>（如日志处理、事务管理等）。  </p>
<h5 id="JDK动态代理使用步骤"><a href="#JDK动态代理使用步骤" class="headerlink" title="JDK动态代理使用步骤"></a>JDK动态代理使用步骤</h5><p><strong>1. 定义目标方法的接口（必须）</strong></p>
<p><strong>2. 实现接口目标方法的实现类（不是必须，如RPC中客户端代理没有实现类/Mybatis中的mapper接口也没有实现类，可在代理过程中实现 ）</strong></p>
<p><strong>3. 定义InvocationHandler，在invoke()方法中实现代理的业务逻辑，构造InvocationHandler时可传入必要的参数，以便在invoke()中使用。例如，可传入实现类作为构造参数。</strong></p>
<p><strong>4. 调用Proxy.newProxyInstance()生成代理类对象。该方法传入三个参数</strong>：</p>
<ul>
<li>ClassLoader：代理对象的类加载器；</li>
<li>Class&lt;?&gt;[] interfaces：代理对象需要实现的接口；</li>
<li>InvocationHandler：自定义实现的InvocationHandler</li>
</ul>
<p>5.通过代理类对象运行目标方法。</p>
<h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>那么 Java 的动态代理是如何实现的？<br>首先开门见山直接进入生成代理类对象的Proxy.newProxyInstance()方法。</p>
<h5 id="Proxy-newProxyInstance-方法"><a href="#Proxy-newProxyInstance-方法" class="headerlink" title="Proxy.newProxyInstance()方法"></a>Proxy.newProxyInstance()方法</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">@CallerSensitive</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object newProxyInstance(ClassLoader loader,</div><div class="line">                                      <span class="keyword">Class</span>&lt;?&gt;[] interfaces,</div><div class="line">                                      InvocationHandler h)</div><div class="line">    <span class="keyword">throws</span> IllegalArgumentException</div><div class="line">&#123;</div><div class="line">    Objects.requireNonNull(h);</div><div class="line">    <span class="comment">//克隆传入的接口</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">Class</span>&lt;?&gt;[] intfs = interfaces.clone();</div><div class="line">    <span class="keyword">final</span> SecurityManager sm = System.getSecurityManager();</div><div class="line">    <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</div><div class="line">        checkProxyAccess(Reflection.getCallerClass(), loader, intfs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//通过类加载器和指定接口，生成代理类字节码文件，并获取代理类Class对象</span></div><div class="line">    <span class="keyword">Class</span>&lt;?&gt; cl = getProxyClass0(loader, intfs);</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</div><div class="line">            checkNewProxyPermission(Reflection.getCallerClass(), cl);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//获取指定构造函数对象(也就是 $Proxy0(InvocationHandler h))</span></div><div class="line">        <span class="keyword">final</span> Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</div><div class="line">        <span class="keyword">final</span> InvocationHandler ih = h;</div><div class="line">        <span class="keyword">if</span> (!Modifier.isPublic(cl.getModifiers())) &#123;</div><div class="line">            AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;<span class="keyword">Void</span>&gt;() &#123;</div><div class="line">                <span class="keyword">public</span> <span class="keyword">Void</span> run() &#123;</div><div class="line">                    cons.setAccessible(<span class="keyword">true</span>);</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//通过构造函数对象生成代理类对象</span></div><div class="line">        <span class="keyword">return</span> cons.newInstance(<span class="keyword">new</span> Object[]&#123;h&#125;);</div><div class="line">    &#125; <span class="comment">// catch...省略 </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这个方法中主要做了以下工作（如代码中的注释部分）：</p>
<ol>
<li><p>通过类加载器和指定接口，生成代理类字节码文件，并获取代理类Class对象cl；</p>
</li>
<li><p>通过Class对象cl获取指定的构造函数对象cons；</p>
</li>
<li><p>构造函数对象cons，通过方法中传入的InvocationHandler，生成一个实例，这个实例就是代理类对象。</p>
</li>
</ol>
<p>可见<strong>反射</strong>在上述代码中起了重要作用。  </p>
<p>大致了解了代理类对象是如何生成的，那么被代理的方法是如何调用的呢？ InvocationHandler中重写的invoke()方法又是如何调用的呢？接下来我们就来看看代理类究竟长什么模样。</p>
<h5 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h5><p>参考其他文章可知最终生成代理类的字节码是这样一行代码：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//生成字节码</span></div><div class="line"><span class="keyword">byte</span>[] proxyClassFile = ProxyGenerator.generateProxyClass(proxyName, interfaces, accessFlags);</div></pre></td></tr></table></figure></p>
<p>调用了ProxyGenerator.generateProxyClass()方法, 因此我们可以通过该方法测试生成的代理类对象Class文件，并对其进行反编译，查看生成的具体代理类究竟是什么模样。</p>
<p>先获取代理类Class文件：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">byte</span>[] proxyBytes = ProxyGenerator.generateProxyClass(<span class="string">"ProxyObject"</span>, <span class="keyword">new</span> <span class="keyword">Class</span>[]&#123;GameService.<span class="keyword">class</span>&#125;);</div><div class="line">        <span class="keyword">File</span> <span class="keyword">file</span> = <span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">"E:\\ProxyObject.class"</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            FileOutputStream out = <span class="keyword">new</span> FileOutputStream(<span class="keyword">file</span>);</div><div class="line">            out.<span class="keyword">write</span>(proxyBytes);</div><div class="line">            out.flush();</div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>将获取到的Class文件存入E盘，即ProxyObject.class文件，然后再通过一个<a href="http://www.javadecompilers.com/" target="_blank" rel="external">在线反编译</a>的网站进行反编译，获取代理类的源码：<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.proxy.GameService;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.UndeclaredThrowableException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> final <span class="class"><span class="keyword">class</span> <span class="title">ProxyObject</span></span></div><div class="line">  <span class="keyword"><span class="keyword">extends</span> <span class="type">Proxy</span></span></div><div class="line">  <span class="keyword"><span class="keyword">implements</span> <span class="type">GameService</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Method m4;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</div><div class="line">  </div><div class="line">  <span class="keyword">public</span> ProxyObject(InvocationHandler paramInvocationHandler)</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">super</span>(paramInvocationHandler);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">public</span> final boolean equals(Object paramObject)</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">try</span></div><div class="line">    &#123;</div><div class="line">      <span class="keyword">return</span> ((Boolean)h.invoke(<span class="built_in">this</span>, m1, <span class="keyword">new</span> <span class="type">Object</span>[] &#123; paramObject &#125;)).booleanValue();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (Error|RuntimeException localError)</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">throw</span> localError;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (Throwable localThrowable)</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">UndeclaredThrowableException</span>(localThrowable);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">public</span> final <span class="keyword">String</span> toString()</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">try</span></div><div class="line">    &#123;</div><div class="line">      <span class="keyword">return</span> (<span class="keyword">String</span>)h.invoke(<span class="built_in">this</span>, m2, <span class="literal">null</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (Error|RuntimeException localError)</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">throw</span> localError;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (Throwable localThrowable)</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">UndeclaredThrowableException</span>(localThrowable);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">public</span> final void playGame(<span class="keyword">String</span> paramString)</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">try</span></div><div class="line">    &#123;</div><div class="line">      h.invoke(<span class="built_in">this</span>, m4, <span class="keyword">new</span> <span class="type">Object</span>[] &#123; paramString &#125;);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (Error|RuntimeException localError)</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">throw</span> localError;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (Throwable localThrowable)</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">UndeclaredThrowableException</span>(localThrowable);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">public</span> final int hashCode()</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">try</span></div><div class="line">    &#123;</div><div class="line">      <span class="keyword">return</span> ((Integer)h.invoke(<span class="built_in">this</span>, m0, <span class="literal">null</span>)).intValue();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (Error|RuntimeException localError)</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">throw</span> localError;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (Throwable localThrowable)</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">UndeclaredThrowableException</span>(localThrowable);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">public</span> final <span class="keyword">String</span> beginGame(<span class="keyword">String</span> paramString)</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">try</span></div><div class="line">    &#123;</div><div class="line">      <span class="keyword">return</span> (<span class="keyword">String</span>)h.invoke(<span class="built_in">this</span>, m3, <span class="keyword">new</span> <span class="type">Object</span>[] &#123; paramString &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (Error|RuntimeException localError)</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">throw</span> localError;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (Throwable localThrowable)</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">UndeclaredThrowableException</span>(localThrowable);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">static</span></div><div class="line">  &#123;</div><div class="line">    <span class="keyword">try</span></div><div class="line">    &#123;</div><div class="line">      m1 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"equals"</span>, <span class="keyword">new</span> <span class="type">Class</span>[] &#123; Class.forName(<span class="string">"java.lang.Object"</span>) &#125;);</div><div class="line">      m2 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"toString"</span>, <span class="keyword">new</span> <span class="type">Class</span>[<span class="number">0</span>]);</div><div class="line">      m4 = Class.forName(<span class="string">"com.proxy.GameService"</span>).getMethod(<span class="string">"playGame"</span>, <span class="keyword">new</span> <span class="type">Class</span>[] &#123; Class.forName(<span class="string">"java.lang.String"</span>) &#125;);</div><div class="line">      m0 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"hashCode"</span>, <span class="keyword">new</span> <span class="type">Class</span>[<span class="number">0</span>]);</div><div class="line">      m3 = Class.forName(<span class="string">"com.proxy.GameService"</span>).getMethod(<span class="string">"beginGame"</span>, <span class="keyword">new</span> <span class="type">Class</span>[] &#123; Class.forName(<span class="string">"java.lang.String"</span>) &#125;);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (NoSuchMethodException localNoSuchMethodException)</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">NoSuchMethodError</span>(localNoSuchMethodException.getMessage());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (ClassNotFoundException localClassNotFoundException)</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">NoClassDefFoundError</span>(localClassNotFoundException.getMessage());</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>观察上述代理类源码可以发现，包含了GameService接口中定义的两个方法playGame()和beginGame()。并且，<br><strong>当代理类对象调用目标方法时，实际上调用的就是InvocationHandler中的invoke()方法，因此也就解释代理类是如何与invoke()方法相关联的。</strong><br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">以playGame方法为例：</div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> void playGame(String paramString) 即调用了</div><div class="line"> h.invoke(this, m4, <span class="keyword">new</span> Object[] <span class="comment">&#123; paramString &#125;</span>);</div><div class="line"> h：构建代理类传入的InvocationHandler</div><div class="line"> m4: <span class="keyword">static</span> 代码块中定义的<span class="function"><span class="keyword">method</span>实例</span></div><div class="line"> <span class="title">paramString</span>：参数</div></pre></td></tr></table></figure></p>
<h5 id="代理类特性"><a href="#代理类特性" class="headerlink" title="代理类特性"></a>代理类特性</h5><p>观察上述代理类源码，发现动态生成的代理类有以下特点：  </p>
<p><strong>1. 继承了Proxy类，实现了所代理的接口（不能再继承其他类）;</strong>  </p>
<p><strong>2. 除了包含所代理的接口方法，还有Object类的equals()、hashCode()、toString()三个方法，目的应该是防止重写保证和目标类一致；</strong>  </p>
<p><strong>3. 每一个方法都会执行调用处理器的 invoke() 方法（在其中可实现自定义的逻辑）；</strong></p>
<p><strong>4. 提供了一个使用InvocationHandler作为参数的构造方法，通过前面源码分析也能知道；</strong></p>
<p><strong>5. 每个代理类实例都会关联一个调用处理器对象。传入不同的调用处理器对象可生成不同的代理类对象。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;JDK动态代理简介&quot;&gt;&lt;a href=&quot;#JDK动态代理简介&quot; class=&quot;headerlink&quot; title=&quot;JDK动态代理简介&quot;&gt;&lt;/a&gt;JDK动态代理简介&lt;/h4&gt;&lt;p&gt;什么是JDK动态代理？&lt;br&gt;先看看代理的概念——&lt;strong&gt;代理：为其他对象提
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JDK动态代理" scheme="http://yoursite.com/tags/JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
      <category term="代理模式" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>基数排序的简单实现</title>
    <link href="http://yoursite.com/2018/06/24/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2018/06/24/基数排序/</id>
    <published>2018-06-24T05:48:18.000Z</published>
    <updated>2018-06-24T06:28:43.863Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><p><strong>基数排序是一种基于分配的排序（空间换时间）</strong>，不同于常见的基于比较的排序（冒泡、快排、归并…等）。  </p>
<p><strong>基于比较的排序时间复杂度通常是O（n^2）或者O（nlogn），下限是O（nlogn）；</strong>  </p>
<p><strong>基于分配的排序算法的时间复杂度可以达到O（n），但需要消耗额外空间；</strong></p>
<p>在某些时候，基数排序的效率高于其它基于比较的排序算法（快排、归并等）。</p>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。进行了c次（c是整数的位数）比较之后，得到一个有序的数组。<br>基数排序是桶排序的扩展，每一次排序建立在桶排序的基础上。</p>
<h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><p><strong>1. 将每个数字统一位数长度（数位短的前面补0）；</strong><br><strong>2. 从最低位（个位）开始，依次进行每次排序；</strong><br><strong>3. 最高位排序完成后，数组就变成了有序数组。</strong></p>
<h4 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h4><p>通过基数排序对一个无序数组进行排序{53, 542, 3, 63, 14, 214, 154, 748, 616}，它的示意图如下：</p>
<p><img src="http://osuskkx7k.bkt.clouddn.com/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F.jpg" alt="image"></p>
<h5 id="比较过程"><a href="#比较过程" class="headerlink" title="比较过程"></a>比较过程</h5><p>结合上图分析比较过程。<br><strong>每次比较，根据相应位数上的值，将元素放入对应的桶（0-10）中。</strong></p>
<p><img src="http://osuskkx7k.bkt.clouddn.com/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F%E8%A1%A8.png" alt=""></p>
<p>经过第三次排序，如图一，得到一个有序的数组。</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><h5 id="计算排序的次数"><a href="#计算排序的次数" class="headerlink" title="计算排序的次数"></a>计算排序的次数</h5><p>排序的次数即数组统一的位数（也是最大元素的位数），在这里是 3 位，总共需要比较3次。</p>
<figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取最大值</span></div><div class="line"><span class="type">int</span> <span class="built_in">max</span> = a[<span class="number">0</span>];</div><div class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">length</span>; i++) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">max</span> &lt; a[i]) &#123;</div><div class="line">        <span class="built_in">max</span> = a[i];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//根据最大值确定排序的遍数（如369三位数，就是3遍）</span></div><div class="line"><span class="type">int</span> time = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span> (<span class="built_in">max</span> &gt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="built_in">max</span> = <span class="built_in">max</span> / <span class="number">10</span>;</div><div class="line">    time ++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="排序过程"><a href="#排序过程" class="headerlink" title="排序过程"></a>排序过程</h5><p>每一次排序之后，都要根据排序的结果记录新的顺序，以便下一次排序。<br>思路如下：<br><strong>1. 将桶数组看成是一个只有10个元素（0-9）的队列，建立该队列（父队列）；</strong><br><strong>2. 父队列中的每一个元素都代表一个子队列，用于存放每个桶中的元素，可能0个也可能多个；</strong></p>
<p>注：采用数组ArrayList来代替子队列，也可以采用链表<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//建立一个主队列，包含10个子队列</span></div><div class="line">List&lt;ArrayList&gt; <span class="built_in">queue</span> = <span class="keyword">new</span> ArrayList&lt;ArrayList&gt;();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">    ArrayList&lt;Integer&gt; subQueue = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="built_in">queue</span>.add(subQueue);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>3. 分配数组元素</strong></p>
<p>将每一个数组元素分配进入相应的桶中，即子队列中。<br>每次分配时，i 的值表示获取元素对应位数上的数字：<br>i = 0 ，表示个位；<br>i= 1，表示十位；<br>i = 2， 表示百位；<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//分配数组元素</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a.length; j++) &#123;</div><div class="line">    <span class="keyword">int</span> c = a[j] % (<span class="keyword">int</span>)Math.<span class="built_in">pow</span>(<span class="number">10</span>, i + <span class="number">1</span>); <span class="comment">//当前位上的数字</span></div><div class="line">    <span class="keyword">int</span> x = c / (<span class="keyword">int</span>)Math.<span class="built_in">pow</span>(<span class="number">10</span>, i); <span class="comment">//子队列的序号</span></div><div class="line">    <span class="comment">//System.out.println(x);</span></div><div class="line">    ArrayList&lt;Integer&gt; subQueue = <span class="built_in">queue</span>.get(x);  <span class="comment">//从父队列获取子队列</span></div><div class="line">    subQueue.add(a[j]);</div><div class="line">    <span class="built_in">queue</span>.<span class="built_in">set</span>(x, subQueue);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> radisSort(<span class="built_in">int</span>[] a) &#123;</div><div class="line"></div><div class="line">        <span class="comment">//获取最大值</span></div><div class="line">        <span class="built_in">int</span> <span class="built_in">max</span> = a[<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="built_in">max</span> &lt; a[i]) &#123;</div><div class="line">                <span class="built_in">max</span> = a[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//根据最大值确定排序的遍数（如369三位数，3遍）</span></div><div class="line">        <span class="built_in">int</span> time = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (<span class="built_in">max</span> &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="built_in">max</span> = <span class="built_in">max</span> / <span class="number">10</span>;</div><div class="line">            time ++;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//建立一个主队列，包含10个子队列</span></div><div class="line">        List&lt;ArrayList&gt; queue = <span class="keyword">new</span> ArrayList&lt;ArrayList&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            ArrayList&lt;Integer&gt; subQueue = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">            queue.<span class="built_in">add</span>(subQueue);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//time次排序</span></div><div class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; time; i++) &#123;</div><div class="line"></div><div class="line">            <span class="comment">//分配数组元素</span></div><div class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; a.length; j++) &#123;</div><div class="line">                <span class="built_in">int</span> c = a[j] % (<span class="built_in">int</span>)Math.<span class="built_in">pow</span>(<span class="number">10</span>, i + <span class="number">1</span>); <span class="comment">//当前位上的数字</span></div><div class="line">                <span class="built_in">int</span> x = c / (<span class="built_in">int</span>)Math.<span class="built_in">pow</span>(<span class="number">10</span>, i); <span class="comment">//子队列的序号</span></div><div class="line">                <span class="comment">//System.out.println(x);</span></div><div class="line">                ArrayList&lt;Integer&gt; subQueue = queue.<span class="built_in">get</span>(x);  <span class="comment">//从父队列获取子队列</span></div><div class="line">                subQueue.<span class="built_in">add</span>(a[j]);</div><div class="line">                queue.<span class="built_in">set</span>(x, subQueue);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//分配结束后，记录新的顺序</span></div><div class="line">            <span class="built_in">int</span> k = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> n = <span class="number">0</span>; n &lt; <span class="number">10</span>; n++) &#123;</div><div class="line">                <span class="comment">//取出有元素的子队列</span></div><div class="line">                <span class="keyword">while</span> (queue.<span class="built_in">get</span>(n).<span class="built_in">size</span>() &gt; <span class="number">0</span>) &#123;</div><div class="line">                    ArrayList&lt;Integer&gt; subQueue = queue.<span class="built_in">get</span>(n);</div><div class="line">                    a[k ++] = subQueue.<span class="built_in">get</span>(<span class="number">0</span>);  <span class="comment">//头部元素</span></div><div class="line">                    subQueue.remove(<span class="number">0</span>);  <span class="comment">//移除元素</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//打印每次排序后的新数组</span></div><div class="line"><span class="comment">//            for (int m : a) &#123;</span></div><div class="line"><span class="comment">//                System.out.print(m + " ");</span></div><div class="line"><span class="comment">//            &#125;</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//打印最终排好序的数组</span></div><div class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> m : a) &#123;</div><div class="line">            System.out.<span class="built_in">print</span>(m + <span class="string">" "</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">        <span class="built_in">int</span>[] a = &#123;<span class="number">53</span>, <span class="number">542</span>, <span class="number">3</span>, <span class="number">63</span>, <span class="number">14</span>, <span class="number">214</span>, <span class="number">154</span>, <span class="number">748</span>, <span class="number">616</span>&#125;;</div><div class="line">        radisSort(a);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">3 </span><span class="number">14</span> <span class="number">53</span> <span class="number">63</span> <span class="number">154</span> <span class="number">214</span> <span class="number">542</span> <span class="number">616</span> <span class="number">748</span></div></pre></td></tr></table></figure>
<p>以上，就是基数排序的大致过程。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基数排序&quot;&gt;&lt;a href=&quot;#基数排序&quot; class=&quot;headerlink&quot; title=&quot;基数排序&quot;&gt;&lt;/a&gt;基数排序&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;基数排序是一种基于分配的排序（空间换时间）&lt;/strong&gt;，不同于常见的基于比较的排序（冒泡、快排、归并…
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="排序" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="基数排序" scheme="http://yoursite.com/tags/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之单例模式</title>
    <link href="http://yoursite.com/2018/05/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/05/15/设计模式之单例模式/</id>
    <published>2018-05-15T06:12:12.000Z</published>
    <updated>2018-07-27T13:48:40.681Z</updated>
    
    <content type="html"><![CDATA[<h4 id="单例模式定义"><a href="#单例模式定义" class="headerlink" title="单例模式定义"></a>单例模式定义</h4><p>单例模式是设计模式的一种，为了保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p>
<h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul>
<li>单例类保证只有一个实例（构造函数私有化）</li>
<li>单例类自己创建自己</li>
<li>单例类必须为其他对象提供访问唯一实例的方法</li>
</ul>
<h5 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h5><ul>
<li>配置类信息</li>
<li>Java中的Runtime类</li>
<li>线程池的设计一般也是采用单例模式</li>
</ul>
<p>单例模式的实现有饿汉模式、懒汉模式（多种）、静态内部类、枚举类等多种实现方式。</p>
<h4 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a>饿汉模式</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class Singleton &#123;</div><div class="line"></div><div class="line">    private Singleton()&#123;&#125;;</div><div class="line"></div><div class="line">    private static Singleton<span class="built_in"> instance </span>= new Singleton();</div><div class="line"></div><div class="line">    public static Singleton getInstance () &#123;</div><div class="line">        return<span class="built_in"> instance;</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过static的静态初始化方式，在该类第一次被加载的时候，就有一个Singleton类的实例被创建出来了。这样就保证在第一次想要使用该对象时，它已经被初始化好了。</p>
<p>注：<strong>JVM在初始化一个类的时候（即调用类构造函数<clinit>()）会自动同步，因此不用关心线程安全问题，但是一旦完成类加载过程，无论是否使用该单例，该单例都已经实际占用内存。</clinit></strong></p>
<p>优点： 线程安全<br>缺点：占用内存（只要类加载无论是否使用单例，都会占用内存。万一单例对象很大）</p>
<h4 id="懒汉模式"><a href="#懒汉模式" class="headerlink" title="懒汉模式"></a>懒汉模式</h4><h5 id="线程不安全的懒汉模式"><a href="#线程不安全的懒汉模式" class="headerlink" title="线程不安全的懒汉模式"></a>线程不安全的懒汉模式</h5><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//懒汉</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SingletonLazy</span> &#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonLazy</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonLazy instance = <span class="literal">null</span>;</div><div class="line"></div><div class="line">    <span class="comment">//线程不安全</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonLazy <span class="title">getInstance</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SingletonLazy();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>在该对象真正被使用的时候才会实例化。即调用getInstance()方法时。但是在这种形式下会存在线程安全问题（多线程同时进入if语句）。</p>
<h5 id="线程安全的懒汉模式"><a href="#线程安全的懒汉模式" class="headerlink" title="线程安全的懒汉模式"></a>线程安全的懒汉模式</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public synchronized static SingletonLazy getInstance2() &#123;</div><div class="line">       <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</div><div class="line">           return new SingletonLazy();</div><div class="line">       &#125;</div><div class="line">       return<span class="built_in"> instance;</span></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>这种实现方式虽然可以解决线程安全问题，但是效率很低，因为synchronized的加锁范围是整个方法，导致不必要的开销。</p>
<h5 id="双重校验"><a href="#双重校验" class="headerlink" title="双重校验"></a>双重校验</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public  static SingletonLazy getInstance3() &#123;</div><div class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</div><div class="line">            synchronized (SingletonLazy.class) &#123;</div><div class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</div><div class="line">                    return new SingletonLazy();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return<span class="built_in"> instance;</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>采用 synchronized 同步代码块代替同步锁的方式，缩小了锁的范围，提高效率。<br>但是这种实现方式再多线程访问时，存在一个由指令重排序引起的问题。  </p>
<h5 id="指令重排序引起的问题"><a href="#指令重排序引起的问题" class="headerlink" title="指令重排序引起的问题"></a>指令重排序引起的问题</h5><p>具体如下：<strong>instance = new Singleton()不是原子操作</strong>，实际上被拆分为了三步：<br>1) 分配内存；<br>2) 初始化对象；<br>3) 将instance指向分配的对象内存地址。<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">正常对象初始化顺序：</div><div class="line">memory = allocate();   //1：分配对象的内存空间</div><div class="line">ctorInstance(memory);  //2：初始化对象<span class="built_in"></span></div><div class="line">instance = memory;     //3：设置instance指向刚分配的内存地址</div><div class="line"></div><div class="line">重排序之后：</div><div class="line">memory = allocate();   //1：分配对象的内存空间<span class="built_in"></span></div><div class="line">instance = memory;     //3：设置instance指向刚分配的内存地址</div><div class="line">                       //注意，此时对象还没有被初始化！</div><div class="line">ctorInstance(memory);  //2：初始化对象</div></pre></td></tr></table></figure></p>
<p>试想一下，<strong>当一个线程访问获取单例对象时指令进行了重排序，instance先指向了分配的对象内存地址，但还未初始化完成。此时又有一个线程访问，在判断为null的时候发现不为空，于是就直接返回了，但实际上这个对象还未初始化完成，于是就会出错。</strong><br>如何解决？Volatile关键字。</p>
<h5 id="双重校验优化版（volatile）"><a href="#双重校验优化版（volatile）" class="headerlink" title="双重校验优化版（volatile）"></a>双重校验优化版（volatile）</h5><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class SingletonDoubleCheck &#123;</div><div class="line"></div><div class="line">   <span class="keyword"> private</span> SingletonDoubleCheck() &#123;&#125;;</div><div class="line"></div><div class="line">   <span class="keyword"> private</span><span class="keyword"> static</span> volatile SingletonDoubleCheck<span class="built_in"> instance </span>= null;</div><div class="line"></div><div class="line">   <span class="keyword"> public</span> SingletonDoubleCheck getInstance() &#123;</div><div class="line"></div><div class="line">       <span class="built_in"> if </span>(instance == null) &#123;   //Check 1</div><div class="line">            synchronized (SingletonDoubleCheck.class) &#123;</div><div class="line">               <span class="built_in"> if </span>(instance == null) &#123; //Check 2</div><div class="line">                   <span class="built_in"> instance </span>=<span class="built_in"> new </span>SingletonDoubleCheck();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">       <span class="built_in"> return </span>instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用volatile关键字的目的不是保证可见性（synchronized已经保证了可见性），而是为了保证有序性（防止指令重排序）。</p>
<h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SingletonHolder</span> &#123;</div><div class="line">    <span class="comment">//私有类，只能在本类访问</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Holder</span> &#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> final SingletonHolder instance = <span class="keyword">new</span> SingletonHolder();</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Holder</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">        <span class="keyword">static</span> &#123;</div><div class="line">            System.<span class="keyword">out</span>.println(<span class="string">"内部类被初始化了"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonHolder</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> SingletonHolder <span class="title">getInstance</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> Holder.instance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//测试</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        SingletonHolder singletonHolder = <span class="keyword">new</span> SingletonHolder(); <span class="comment">//单独new对象，不会加载Holder，不会输出语句</span></div><div class="line">        singletonHolder.getInstance(); <span class="comment">//调用方法时才会加载Holder，输出语句</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>优点：</p>
<ol>
<li>线程安全（静态变量）</li>
<li>可实现懒加载</li>
</ol>
<p><strong>为什么静态内部类单例可以实现延迟加载？</strong>  </p>
<p><strong>原理：加载一个类时，其内部类不会同时被加载。一个类被加载，当且仅当其某个静态成员（静态域、构造器、静态方法等）被调用时发生。</strong><br>所以当外部类被加载时，内部类并没有被加载，内部类不被加载则不需要进行类初始化，所以单例对象未初始化。</p>
<h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">enum</span> <span class="title">SingletonEnum</span> &#123;</span></div><div class="line">        SINGLETON;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>优点： 线程安全<br>缺点： 占用内存，无法实现懒加载。</p>
<h5 id="如何破坏单例模式？"><a href="#如何破坏单例模式？" class="headerlink" title="如何破坏单例模式？"></a>如何破坏单例模式？</h5><p>通过<strong>反射或序列化</strong>，我们仍然能够访问到私有构造器，创建新的实例破坏单例模式。此时，只有枚举模式能天然防范这一问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;单例模式定义&quot;&gt;&lt;a href=&quot;#单例模式定义&quot; class=&quot;headerlink&quot; title=&quot;单例模式定义&quot;&gt;&lt;/a&gt;单例模式定义&lt;/h4&gt;&lt;p&gt;单例模式是设计模式的一种，为了保证一个类仅有一个实例，并提供一个访问它的全局访问点。&lt;/p&gt;
&lt;h5 id=
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="设计模式，单例模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%8C%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>IO模型碎碎念</title>
    <link href="http://yoursite.com/2018/04/16/IO%E6%A8%A1%E5%9E%8B%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    <id>http://yoursite.com/2018/04/16/IO模型碎碎念/</id>
    <published>2018-04-16T06:12:12.000Z</published>
    <updated>2019-01-05T10:14:21.689Z</updated>
    
    <content type="html"><![CDATA[<h4 id="IO相关概念"><a href="#IO相关概念" class="headerlink" title="IO相关概念"></a>IO相关概念</h4><h5 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h5><p><strong>同步</strong>：发出一个调用后，在没有得到结果之前，该调用就不会返回。当调用返回时，就能得到返回结果。（调用者主动等待结果）</p>
<p><strong>异步</strong>：发出一个调用后，这个调用就返回了，没有返回结果。（调用者被动等待结果，会得到通知）</p>
<h5 id="阻塞与非阻塞"><a href="#阻塞与非阻塞" class="headerlink" title="阻塞与非阻塞"></a>阻塞与非阻塞</h5><p><strong>阻塞</strong>：某个请求发出后，如果不满足请求需要的条件，那么就会一只等待，直到满足条件。</p>
<p><strong>非阻塞</strong>：某个请求发出后，如果不满足请求需要的条件，则立即返回一个标志信息告知条件不满足，而不会一直等待。一般需要通过循环判断请求条件是否满足来获取请求结果。</p>
<p><strong>同步/异步关注的是**</strong>消息通信机制<strong>，程序之间的协作关系。  
</strong>阻塞/非阻塞关注的是<strong>**程序在等待调用结果（消息，返回值）时的状态</strong>，程序执行状态。</p>
<h5 id="同步IO和异步IO"><a href="#同步IO和异步IO" class="headerlink" title="同步IO和异步IO"></a>同步IO和异步IO</h5><p><strong>同步IO</strong>：用户进程触发IO操作后，等待或者轮询的去查看IO操作是否完成。</p>
<p><strong>异步IO</strong>：用户进程触发IO操作以后,可以干别的事，IO操作完成以后自动通知当前线程。（类似回调）</p>
<h5 id="阻塞IO与非阻塞IO"><a href="#阻塞IO与非阻塞IO" class="headerlink" title="阻塞IO与非阻塞IO"></a>阻塞IO与非阻塞IO</h5><p>阻塞IO：如果数据没有就绪，会一直等待，直到数据就绪。 </p>
<p>非阻塞IO：如果数据没有就绪，则会返回一个标志信息告知用户线程当前要读的数据没有就绪。</p>
<h4 id="Linux下的五种IO模型"><a href="#Linux下的五种IO模型" class="headerlink" title="Linux下的五种IO模型"></a>Linux下的五种IO模型</h4><h5 id="IO过程简介"><a href="#IO过程简介" class="headerlink" title="IO过程简介"></a>IO过程简介</h5><p><a href="https://imgchr.com/i/F7YX28" target="_blank" rel="external"><img src="https://s2.ax1x.com/2019/01/05/F7YX28.md.png" alt="F7YX28.md.png"></a></p>
<p><strong>网络IO的本质是Socket的读取，对于一次IO访问（以read为例），数据会先被拷贝到操作系统内核的缓冲区，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间中。</strong> 所以说，当一个read操作发生时，它会经历两个阶段：</p>
<p>第一阶段：等待数据准备好</p>
<p>第二阶段：将数据从内核拷贝到用户进程中</p>
<p>对于socket流而言：</p>
<p>第一步：通常涉及等待网络上的数据分组到达，然后复制到内核的某个缓冲区。</p>
<p>第二步：把数据从内核缓冲区复制到应用进程缓冲区。</p>
<p>当然，如果内核空间的缓冲区中已经有数据了，那么就可以省略第一步。<strong>至于为什么不能直接让磁盘控制器把数据送到应用程序的地址空间中呢？最简单的一个原因就是应用程序不能直接操作底层硬件。</strong></p>
<hr>
<p>Linux网络IO模型大致分为以下五种：</p>
<ol>
<li>阻塞IO</li>
<li>非阻塞IO</li>
<li>I/O多路复用（异步阻塞 I/O）</li>
<li>信号驱动I/O（SIGIO）</li>
<li>异步I/O</li>
</ol>
<p><strong>前四种都属于同步IO，最后一种是异步IO。</strong></p>
<h4 id="阻塞IO"><a href="#阻塞IO" class="headerlink" title="阻塞IO"></a>阻塞IO</h4><p>应用程序调用一个IO函数，如下图中的recvfrom()函数，此时内核数据没有准备好，导致应用程序阻塞，等待数据准备好。 如果数据准备好了，会将数据从内核拷贝到用户空间，IO函数返回成功指示。应用程序解除阻塞，处理数据。</p>
<p><img src="https://s2.ax1x.com/2019/01/05/F7ter4.png" alt="image"></p>
<p><strong>场景描述</strong>：好比在餐厅吃饭，但今天是情人节人太多，需要排队叫号才能吃饭，吃完才能去逛商场，中间排队叫号等待的时间浪费掉了。这就是阻塞。</p>
<h4 id="非阻塞IO"><a href="#非阻塞IO" class="headerlink" title="非阻塞IO"></a>非阻塞IO</h4><p>进程反复调用IO函数，每次调用都会立即返回（如图中前三次调用都立即返回EWOULDBLOCK，表示数据还没有准备好），这个时候不会阻塞用户进程（可以做其他的事情）；直到某一次调用时，数据准备好了，于是进行数据拷贝，在这个过程中用户进程是阻塞状态。</p>
<p><strong>对于应用程序而言，虽然这个IO操作很快就返回了，但是它并不知道这个IO操作是否真的成功了。</strong> 为了知道IO操作是否成功，一般有两种策略：  </p>
<p>一是需要应用程序主动地循环地去问，直到数据准备好为止，在这个不断问的过程中 <strong>（轮询）</strong>，会大量的占用CPU的时间；</p>
<p>二是采用<strong>IO通知机制</strong>，比如：IO多路复用或信号驱动IO。</p>
<p><a href="https://imgchr.com/i/F7YGHs" target="_blank" rel="external"><img src="https://s2.ax1x.com/2019/01/05/F7YGHs.md.png" alt="F7YGHs.md.png"></a></p>
<p><strong>场景描述</strong> ：还是刚刚的例子，觉得等待太漫长了，于是决定去逛商场，但是逛一会就回来问问服务员有没有被叫号，来来回回好几次。这就是非阻塞。</p>
<h4 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a>IO多路复用</h4><p>当用户进程调用了select，那么整个进程会阻塞，而同时select负责监听Socket，当任何一个Socket中的数据准备好了，select就会返回。这个时候用户进程再调用recvfrom()，将数据从内核拷贝到用户进程。如图。</p>
<h5 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h5><p>IO多路复用模型会用到select、poll、epoll函数，这几个函数也会使进程阻塞，但是和阻塞IO所不同的的，<strong>这两个函数可以同时阻塞多个IO操作。 而且可以同时对多个读写操作的IO函数进行检测，直到有数据可读或可写时（注意不是全部数据可读或可写），才真正调用IO操作函数。</strong></p>
<p><strong>IO多路复用是阻塞在select，epoll这样的系统调用之上，而没有阻塞在真正的IO系统调用如recvfrom()之上。</strong></p>
<p><a href="https://imgchr.com/i/F7Y8Bj" target="_blank" rel="external"><img src="https://s2.ax1x.com/2019/01/05/F7Y8Bj.md.png" alt="F7Y8Bj.md.png"></a></p>
<p><strong>场景描述</strong>：发现关注微信号可以看到叫号的状态，所以在逛商场的时候，就不用经常回去问服务员了，而是看下微信就可以了。（不仅仅是我们不用问服务员，其他所有人都可以不用问服务员）。这就是IO多路复用。</p>
<h4 id="信号驱动IO（SIGIO）"><a href="#信号驱动IO（SIGIO）" class="headerlink" title="信号驱动IO（SIGIO）"></a>信号驱动IO（SIGIO）</h4><p>首先我们允许Socket进行信号驱动IO，并安装一个信号处理函数，进程继续运行不会阻塞。当数据准备好时，进程会收到一个SIGIO信号，随后就可以在信号处理函数中调用IO操作(recvfrom()函数)处理数据。</p>
<p><strong>这种IO模型的优点是当进程调用recvfrom()时，数据必定已经可以读取了，因为当内核发送SIGIO信号时,数据已经准备就绪了。</strong></p>
<p><img src="https://s2.ax1x.com/2019/01/05/F7Y3uQ.png" alt="F7Y3uQ.png"></p>
<p><strong>场景描述</strong>：如果这个商家没有微信公众号可以查看状态，那么我们可以留一个电话号码，告诉服务员如果叫到号了就打电话通知我们，没打我们就继续逛商场，打了我们就可以直接过去吃饭了。这就是信号驱动IO，打电话就相当于收到信号。</p>
<h4 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a>异步IO</h4><p>用户进程告知内核启动某个操作（图中aio_read操作，立即返回），并让内核在整个IO操作完成后通知我们，用户进程不阻塞；在数据拷贝的时候用户进程也不会阻塞。</p>
<p>前面的IO模型都是需要我们在 <strong>读写事件就绪后（数据准备好以后）</strong> 自己负责进行读写，而异步IO则不需要，是内核替我们做了这些事，最后只需要当IO完成时才通知我们。<strong>注意它和信号驱动IO不同，信号驱动IO是通知我们何时可以进行IO，而异步IO是通知我们何时完成了IO。</strong></p>
<p><img src="https://s2.ax1x.com/2019/01/05/F7Yljg.png" alt="F7Yljg.png"></p>
<p><strong>场景描述</strong>：突然我们不想在饭店吃饭了，打算回家休息。于是我们叫了饭店的外卖，等饭好了会自动送到家里。这就是异步。</p>
<h4 id="5个IO模型的比较"><a href="#5个IO模型的比较" class="headerlink" title="5个IO模型的比较"></a>5个IO模型的比较</h4><p><img src="https://s2.ax1x.com/2019/01/05/F7YQgS.png" alt="F7YQgS.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;IO相关概念&quot;&gt;&lt;a href=&quot;#IO相关概念&quot; class=&quot;headerlink&quot; title=&quot;IO相关概念&quot;&gt;&lt;/a&gt;IO相关概念&lt;/h4&gt;&lt;h5 id=&quot;同步和异步&quot;&gt;&lt;a href=&quot;#同步和异步&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="IO概念" scheme="http://yoursite.com/tags/IO%E6%A6%82%E5%BF%B5/"/>
    
      <category term="Linux中IO模型" scheme="http://yoursite.com/tags/Linux%E4%B8%ADIO%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之工厂模式（工厂三兄弟）</title>
    <link href="http://yoursite.com/2018/04/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%B7%A5%E5%8E%82%E4%B8%89%E5%85%84%E5%BC%9F%EF%BC%89/"/>
    <id>http://yoursite.com/2018/04/05/设计模式之工厂模式（工厂三兄弟）/</id>
    <published>2018-04-05T06:12:12.000Z</published>
    <updated>2018-07-27T13:49:39.325Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p><strong>简单工厂模式又叫静态工厂方法模式。<br>通过定义一个工厂类，根据传入的不同参数，创建不同的实例对象。这些实例对象具有共同的父类或接口。</strong></p>
<h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//抽象产品</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Product</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">productName</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//具体产品</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductA</span> <span class="keyword">implements</span> <span class="title">Product</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">productName</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"产品A"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductB</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">productName</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"产品B"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//工厂类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Product <span class="title">createProduct</span><span class="params">(String productName)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (productName) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">"A"</span> :</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ProductA();</div><div class="line">            <span class="keyword">case</span> <span class="string">"B"</span> :</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ProductB();</div><div class="line">            <span class="keyword">default</span>: <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">       <span class="comment">//创建产品A</span></div><div class="line">       Product productA = SimpleFactory.createProduct(<span class="string">"A"</span>);</div><div class="line">       productA.productName();</div><div class="line">       <span class="comment">//创建产品B</span></div><div class="line">       Product productB = SimpleFactory.createProduct(<span class="string">"B"</span>);</div><div class="line">       productB.productName();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>从上面的代码可以看到，如果需要引入新的产品，那么就要改动SimpleFactory类，这就违反了开闭原则。可以利用反射来解决该问题，在配置文件中指定类的完整类名，在SimpleFactory类中通过反射实例化对象。实现了对扩展的开放，同时保证了对修改的关闭。</p>
<h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ol>
<li>工厂类是整个简单工厂模式的关键。用户在使用时可以直接根据工厂类去创建所需的实例，而无需了解这些对象是如何创建以及如何组织的。客户端不关心对象的创建过程。</li>
<li><strong>通过引入配置文件和反射，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类。</strong></li>
</ol>
<h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ol>
<li>由于工厂类集中了所有实例的创建逻辑，这就直接导致<strong>一旦这个工厂出了问题，所有的客户端都会受到牵连</strong>。</li>
<li>简单工厂模式违背了“开放-关闭原则”，因为当我们新增加一个产品的时候必须修改工厂类，相应的工厂类就需要重新编译一遍。</li>
<li>违背了单一职责原则（<strong>工厂类即要负责逻辑判断又要负责实例创建</strong>）</li>
</ol>
<p><strong>应用</strong>：<strong>简单工厂模式在JDK中最典型的应用要数JDBC了</strong>。可以把关系型数据库认为是一种抽象产品，各厂商提供的具体关系型数据库（MySQL，PostgreSQL，Oracle）则是具体产品。DriverManager是工厂类。应用程序通过JDBC接口使用关系型数据库时，并不需要关心具体使用的是哪种数据库，而直接使用DriverManager的静态方法去得到该数据库的Connection。</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Connection connect</span> = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/test"</span>);</div></pre></td></tr></table></figure>
<h4 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h4><h5 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h5><p><strong>工厂方法模式又称工厂模式。<br>工厂父类定义创建产品对象的公共接口，具体的工厂子类负责创建具体的产品对象。通过不同的工厂子类来创建不同的产品</strong>。</p>
<p>简单工厂只有一个统一的工厂类，而工厂方法是针对每一个对象都有一个工厂类，这些工厂类都实现了工厂基类。</p>
<h5 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//工厂类A</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryA</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">create</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductA();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//工厂类B</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryB</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">create</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductB();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</div><div class="line"></div><div class="line">       <span class="comment">//创建产品A</span></div><div class="line">       Factory factoryA = <span class="keyword">new</span> <span class="type">FactoryA</span>();</div><div class="line">       Product productA = factoryA.create();</div><div class="line">       productA.productName();</div><div class="line">       <span class="comment">//创建产品B</span></div><div class="line">       Factory factoryB = <span class="keyword">new</span> <span class="type">FactoryB</span>();</div><div class="line">       Product productB = factoryB.create();</div><div class="line">       productB.productName();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><ol>
<li>每个工厂类只负责创建产品，没有简单工厂中的逻辑判断，符合单一职责原则。</li>
<li>客户端不知道它所要创建对象的类，只需要知道工厂名就完成了对象的创建。</li>
<li>新增一种产品时，只需要增加相应的具体产品类和相应的工厂子类即可。</li>
</ol>
<h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><ol>
<li>添加新产品时，除了增加新产品类外，还要增加与之对应的具体工厂类，类的个数将成对增加，在一定程度上增加了系统的复杂度。</li>
<li>一个具体工厂只能创建一种具体产品。</li>
</ol>
<h4 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><p><strong>抽象工厂是工厂方法的进一步深化，在这个模式中的工厂类不单单可以创建一个对象，而是创建一组对象。</strong>（工厂方法模式中一种工厂只能创建一种具体产品）</p>
<p><strong>抽象工厂模式与工厂方法模式最大的区别：抽象工厂中每个工厂可以创建多种类的产品；而工厂方法每个工厂只能创建一种类的产品。</strong></p>
<p>每一个具体工厂都提供了多个工厂方法用于产生多种不同类型的对象。</p>
<h5 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//抽象工厂</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AbstractFactory</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ProductPhone <span class="title">createproductPhone</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> ProductPC <span class="title">createproductPC</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//苹果工厂</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryApple</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ProductPhone <span class="title">createproductPhone</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApplePhone();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ProductPC <span class="title">createproductPC</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApplePC();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Vioio工厂</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryVioio</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ProductPhone <span class="title">createproductPhone</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> VioioPhone();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ProductPC <span class="title">createproductPC</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> VioioPC();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//抽象产品</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductPhone</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductPC</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>; <span class="comment">//不一定是show方法</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//具体产品</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplePhone</span> <span class="keyword">implements</span> <span class="title">ProductPhone</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"一个苹果手机"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplePC</span> <span class="keyword">implements</span> <span class="title">ProductPC</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"一个苹果电脑"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VioioPhone</span> <span class="keyword">implements</span> <span class="title">ProductPhone</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"一个Vioio手机"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VioioPC</span> <span class="keyword">implements</span> <span class="title">ProductPC</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"一个Vioio电脑"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public static void main(<span class="type">String</span>[] args) &#123;</div><div class="line"></div><div class="line">       <span class="comment">//苹果工厂</span></div><div class="line">       <span class="type">FactoryApple</span> factoryApple = <span class="function"><span class="keyword">new</span> <span class="title">FactoryApple</span>();</span></div><div class="line">       <span class="title">ProductPhone</span> <span class="title">productPhone</span> = <span class="title">factoryApple</span>.<span class="title">createproductPhone</span>();</div><div class="line">       <span class="title">productPhone</span>.<span class="title">show</span>();</div><div class="line">       <span class="title">ProductPC</span> <span class="title">productPC</span> = <span class="title">factoryApple</span>.<span class="title">createproductPC</span>();</div><div class="line">       <span class="title">productPC</span>.<span class="title">show</span>();</div><div class="line">       <span class="comment">//Vioio工厂</span></div><div class="line">       <span class="title">FactoryVioio</span> <span class="title">factoryVioio</span> = <span class="title">new</span> <span class="title">FactoryVioio</span>();</div><div class="line">       <span class="title">ProductPhone</span> <span class="title">productPhone1</span> = <span class="title">factoryVioio</span>.<span class="title">createproductPhone</span>();</div><div class="line">       <span class="title">productPhone1</span>.<span class="title">show</span>();</div><div class="line">       <span class="title">ProductPC</span> <span class="title">productPC1</span> = <span class="title">factoryVioio</span>.<span class="title">createproductPC</span>();</div><div class="line">       <span class="title">productPC1</span>.<span class="title">show</span>();</div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h5 id="抽象工厂模式角色"><a href="#抽象工厂模式角色" class="headerlink" title="抽象工厂模式角色"></a>抽象工厂模式角色</h5><ul>
<li>抽象工厂。如AbstractFactory</li>
<li>具体工厂。如FactoryApple，FactoryVioio</li>
<li>抽象产品。如ProductPhone、ProductPC</li>
<li>具体产品。如ApplePhone、ApplePC、VioioPhone、VioioPC</li>
<li>产品族。包含两个产品：Phone、PC。</li>
</ul>
<h5 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h5><ol>
<li>每个具体工厂类只负责创建产品，没有简单工厂中的逻辑判断，因此符合单一职责原则。</li>
<li>新增一个产品族（如代码中一个产品族包含两个产品：Phone、PC）时，只需要增加相应的具体产品和对应的具体工厂类即可。</li>
</ol>
<h5 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h5><ol>
<li>新增产品种类（如在产品族中增加一个平板）时，需要修改工厂接口（或者抽象工厂）及所有具体工厂，此时不符合开闭原则。<strong>抽象工厂模式对于新的产品族符合开闭原则，而对于新的产品种类不符合开闭原则，这一特性也被称为开闭原则的倾斜性。</strong></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;简单工厂模式&quot;&gt;&lt;a href=&quot;#简单工厂模式&quot; class=&quot;headerlink&quot; title=&quot;简单工厂模式&quot;&gt;&lt;/a&gt;简单工厂模式&lt;/h4&gt;&lt;h5 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="设计模式，工厂模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%8C%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>ActiveMQ结合Spring收发消息</title>
    <link href="http://yoursite.com/2018/02/15/ActiveMQ%E7%BB%93%E5%90%88Spring%E6%94%B6%E5%8F%91%E6%B6%88%E6%81%AF/"/>
    <id>http://yoursite.com/2018/02/15/ActiveMQ结合Spring收发消息/</id>
    <published>2018-02-15T07:12:12.000Z</published>
    <updated>2018-04-14T16:29:31.778Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ActiveMQ结合Spring收发消息"><a href="#ActiveMQ结合Spring收发消息" class="headerlink" title="ActiveMQ结合Spring收发消息"></a>ActiveMQ结合Spring收发消息</h3><p>直接使用ActiveMQ的方式需要重复写很多代码，且不利于管理，Spring 提供了一种更加简便的方式————Spring JMS ，通过它可以更加方便地使用ActiveMQ。</p>
<h4 id="Maven-依赖"><a href="#Maven-依赖" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h4><p>结合Spring使用ActiveMQ的依赖如下：<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="comment">&lt;!-- Spring JMS --&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$<span class="template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- xbean 如&lt;amq:connectionFactory /&gt; --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.xbean<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xbean-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- ActiiveMQ --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-pool<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="ActiveMQ-xml-文件"><a href="#ActiveMQ-xml-文件" class="headerlink" title="ActiveMQ.xml 文件"></a>ActiveMQ.xml 文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:amq</span>=<span class="string">"http://activemq.apache.org/schema/core"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</div><div class="line">        http://activemq.apache.org/schema/core</div><div class="line">        http://activemq.apache.org/schema/core/activemq-core-5.12.1.xsd"&gt;</div><div class="line">    <span class="comment">&lt;!-- ActiveMQ 连接工厂 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">amq:connectionFactory</span> <span class="attr">id</span>=<span class="string">"amqConnectionFactory"</span></span></div><div class="line">                           <span class="attr">brokerURL</span>=<span class="string">"tcp://localhost:61616"</span></div><div class="line">                           <span class="attr">userName</span>=<span class="string">"admin"</span></div><div class="line">                           <span class="attr">password</span>=<span class="string">"admin"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 提高效率，配置JMS连接工厂 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.connection.CachingConnectionFactory"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"amqConnectionFactory"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionCacheSize"</span> <span class="attr">value</span>=<span class="string">"100"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 定义消息队列（Queue）--&gt;</span></div><div class="line">   <span class="comment">&lt;!-- &lt;bean id="QueueDestination" class="org.apache.activemq.command.ActiveMQQueue"&gt;</span></div><div class="line">        &amp;lt;!&amp;ndash; 设置消息队列的名字 &amp;ndash;&amp;gt;</div><div class="line">        &lt;constructor-arg value="Queue-zy"/&gt;</div><div class="line">    &lt;/bean&gt;--&gt;</div><div class="line">    <span class="comment">&lt;!--定义主题(Topic)--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"topicDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQTopic"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"Topic-zy"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 配置JMS模板（Queue），Spring提供的JMS工具类，利用它发送、接收消息。 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jmsTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.core.JmsTemplate"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultDestination"</span> <span class="attr">ref</span>=<span class="string">"topicDestination"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"receiveTimeout"</span> <span class="attr">value</span>=<span class="string">"10000"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- true是topic，false是queue，默认是false --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pubSubDomain"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 配置消息队列监听者（Queue or Topic） --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageListener"</span> <span class="attr">class</span>=<span class="string">"com.service.TopicMessageListener"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 显示注入消息监听容器，配置连接工厂，监听的目标是QueueDestination，监听器是上面定义的监听器 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"ListenerContainer"</span></span></div><div class="line">          <span class="attr">class</span>=<span class="string">"org.springframework.jms.listener.DefaultMessageListenerContainer"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"destination"</span> <span class="attr">ref</span>=<span class="string">"topicDestination"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageListener"</span> <span class="attr">ref</span>=<span class="string">"messageListener"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="配置connectionFactory"><a href="#配置connectionFactory" class="headerlink" title="配置connectionFactory"></a>配置connectionFactory</h5><p>connectionFactory是Spring用于创建到JMS服务器链接的，Spring提供了多种connectionFactory.</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- ActiveMQ 连接工厂 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">amq:connectionFactory</span> <span class="attr">id</span>=<span class="string">"amqConnectionFactory"</span></span></div><div class="line">                       <span class="attr">brokerURL</span>=<span class="string">"tcp://localhost:61616"</span></div><div class="line">                       <span class="attr">userName</span>=<span class="string">"admin"</span></div><div class="line">                       <span class="attr">password</span>=<span class="string">"admin"</span> /&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 提高效率，配置JMS连接工厂 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.connection.CachingConnectionFactory"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"amqConnectionFactory"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionCacheSize"</span> <span class="attr">value</span>=<span class="string">"100"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="配置Queue"><a href="#配置Queue" class="headerlink" title="配置Queue"></a>配置Queue</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=<span class="string">"QueueDestination"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.apache.activemq.command.ActiveMQQueue"</span>&gt;</div><div class="line">       <span class="xml"><span class="comment">&lt;!-- 设置消息队列的名字 --&gt;</span></span></div><div class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"Queue-zy"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="配置Topic"><a href="#配置Topic" class="headerlink" title="配置Topic"></a>配置Topic</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=<span class="string">"topicDestination"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.apache.activemq.command.ActiveMQTopic"</span>&gt;</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"Topic-zy"</span>/&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="配置JMS消息模板——jmsTemplate"><a href="#配置JMS消息模板——jmsTemplate" class="headerlink" title="配置JMS消息模板——jmsTemplate"></a>配置JMS消息模板——jmsTemplate</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置JMS模板，Spring提供的JMS工具类，利用它发送、接收消息--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jmsTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.core.JmsTemplate"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultDestination"</span> <span class="attr">ref</span>=<span class="string">"QueueDestination"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!--&lt;property name="defaultDestination" ref="topicDestination" /&gt;--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"receiveTimeout"</span> <span class="attr">value</span>=<span class="string">"10000"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pubSubDomain"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span><span class="comment">&lt;!-- true是topic，false是queue，默认是false --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>最后，在applicationContext.xml中引入配置好的ActiveMQ.xml<br><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">import</span> resource=<span class="string">"ActiveMQ.xml"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>以上就是配置文件相关的，下面是具体的业务代码。</p>
<h4 id="消息生产者服务"><a href="#消息生产者服务" class="headerlink" title="消息生产者服务"></a>消息生产者服务</h4><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> JmsTemplate jmsTemplate;</div><div class="line"></div><div class="line">    <span class="comment">//使用默认目的地</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">sendMessageDefault</span><span class="params">(<span class="keyword">final</span> String msg)</span></span>&#123;</div><div class="line">        Destination destination = jmsTemplate.getDefaultDestination();</div><div class="line">        System.out.println(<span class="string">"向队列： "</span> + destination + <span class="string">" 成功发送一条消息"</span>);</div><div class="line">        jmsTemplate.send(<span class="keyword">new</span> MessageCreator() &#123;</div><div class="line">            <span class="keyword">public</span> <span class="function">Message <span class="title">createMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> JMSException </span>&#123;</div><div class="line">                <span class="function"><span class="keyword">return</span> session.<span class="title">createTextMessage</span><span class="params">(msg)</span></span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//可指定目的地</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Destination destination,<span class="keyword">final</span> String msg)</span></span>&#123;</div><div class="line"></div><div class="line">        jmsTemplate.send(destination, <span class="keyword">new</span> MessageCreator() &#123;</div><div class="line">            <span class="keyword">public</span> <span class="function">Message <span class="title">createMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> JMSException </span>&#123;</div><div class="line">                <span class="function"><span class="keyword">return</span> session.<span class="title">createTextMessage</span><span class="params">(msg)</span></span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="消息消费者服务"><a href="#消息消费者服务" class="headerlink" title="消息消费者服务"></a>消息消费者服务</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">@Service</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConsumerService</span> &#123;</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    <span class="keyword">private</span> JmsTemplate jmsTemplate;</div><div class="line"></div><div class="line">    <span class="comment">//从指定的Destination接收消息</span></div><div class="line">    <span class="function"><span class="keyword">public</span> TextMessage <span class="title">recive</span>(<span class="params">Destination destination</span>)</span>&#123;</div><div class="line">        TextMessage message = (TextMessage) jmsTemplate.receive(destination);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            System.<span class="keyword">out</span>.println(<span class="string">"从队列"</span> + destination.toString() + <span class="string">"收到了消息"</span> + message.getText());</div><div class="line">        &#125; <span class="keyword">catch</span> (JMSException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> message;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//从默认的Destination接收消息</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reciveDefault</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    </div><div class="line">        Destination destination = jmsTemplate.getDefaultDestination();</div><div class="line">        jmsTemplate.setReceiveTimeout(<span class="number">5000</span>);</div><div class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</div><div class="line">            TextMessage message = (TextMessage) jmsTemplate.receive(destination);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">//这里还是同一个消费者</span></div><div class="line">                System.<span class="keyword">out</span>.println(<span class="string">"消费者  从目的地 "</span> + destination.toString() + <span class="string">" 收到了消息"</span> + message.getText());</div><div class="line">            &#125; <span class="keyword">catch</span> (JMSException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h4><p>直接在main方法中获取ApplicationContext运行，便于测试。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgProducer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ProducerService producerService;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"生产者开始发送消息："</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">11</span>; i++)&#123;</div><div class="line">            String msg = <span class="string">"生产者发出的消息"</span>;</div><div class="line">            producerService.sendMessageDefault(msg + <span class="string">"-----"</span> + i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:/applicationContext.xml"</span>);</div><div class="line">        MsgProducer msgProducer = context.getBean(MsgProducer.class);</div><div class="line">        msgProducer.send();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgConsumer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ConsumerService consumerService;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recive</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"消费者 1 开始接收消息："</span>);</div><div class="line">        consumerService.reciveDefault();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:/applicationContext.xml"</span>);</div><div class="line">        MsgConsumer msgConsumer = context.getBean(MsgConsumer.class);</div><div class="line">        msgConsumer.recive();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来就可以启动项目。同样是使用两种方式测试。</p>
<h4 id="第一种方式————点对点（Queue）"><a href="#第一种方式————点对点（Queue）" class="headerlink" title="第一种方式————点对点（Queue）"></a>第一种方式————点对点（Queue）</h4><h4 id="同步的方式"><a href="#同步的方式" class="headerlink" title="同步的方式"></a>同步的方式</h4><p>先启动生产者  发送10条消息， 再启动消费者，可以看到控制台显示成功收到10条消息  </p>
<p><img src="http://osuskkx7k.bkt.clouddn.com/%E7%82%B9%E5%AF%B9%E7%82%B9%E7%94%9F%E4%BA%A7.png" alt="image"></p>
<p><img src="http://osuskkx7k.bkt.clouddn.com/%E7%82%B9%E5%AF%B9%E7%82%B9%E6%B6%88%E8%B4%B9.jpg" alt="image"></p>
<h4 id="异步监听的方式"><a href="#异步监听的方式" class="headerlink" title="异步监听的方式"></a>异步监听的方式</h4><p>通过监听器即可实现异步接收消息的效果，而不是像上面使用while()轮询同步的方式。<br>项目中一般都是使用异步监听的方式，<strong>在A服务中发送了一条消息，B服务可以利用消息监听器监听，当收到消息后，进行相应的操作</strong>。</p>
<h5 id="消息监听器（3种）"><a href="#消息监听器（3种）" class="headerlink" title="消息监听器（3种）"></a>消息监听器（3种）</h5><p>通过继承JMS中的<strong>MessageListener接口</strong>，实现onMessage()方法，就可以自定义监听器。这是最基本的监听器。（可根据业务实现自定义的功能）</p>
<p>另外spring也给我们提供了其他类型的消息监听器，比如 <strong>SessionAwareMessageListener</strong>，它的作用不仅可以接收消息，还可以发送一条消息通知对方表示自己收到了消息。（还有一种是<strong>MessageListenerAdapter</strong>）</p>
<p>一个简单的自定义监听器如下:收到消息后打印消息<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueueMessageListener</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</div><div class="line">        <span class="comment">//如果有消息</span></div><div class="line">        TextMessage tmessage = (TextMessage) message;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span>(tmessage != <span class="keyword">null</span>)&#123;</div><div class="line">                System.out.println(<span class="string">"监听器监听消息："</span>+tmessage.getText());</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (JMSException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在ActiveMQ.xml中引入消息监听器：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置消息队列监听者（Queue） --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queueMessageListener"</span> <span class="attr">class</span>=<span class="string">"com.service.QueueMessageListener"</span> /&gt;</span></div><div class="line">    </div><div class="line"> <span class="comment">&lt;!-- 显示注入消息监听容器，配置连接工厂，监听的目标是QueueDestination 或 topicDestination，监听器是上面自定义的监听器 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queueListenerContainer"</span></span></div><div class="line">          <span class="attr">class</span>=<span class="string">"org.springframework.jms.listener.DefaultMessageListenerContainer"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"destination"</span> <span class="attr">ref</span>=<span class="string">"QueueDestination"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!--&lt;property name="destination" ref="topicDestination" /&gt;--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageListener"</span> <span class="attr">ref</span>=<span class="string">"queueMessageListener"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>可以看到，当使用消息监听器之后，每发送一条消息立马就会被监听到：  </p>
<p><img src="http://osuskkx7k.bkt.clouddn.com/%E7%82%B9%E5%AF%B9%E7%82%B9%E7%9B%91%E5%90%AC%E5%99%A8.jpg" alt="image"></p>
<h4 id="第二种方式————发布-订阅（Topic）"><a href="#第二种方式————发布-订阅（Topic）" class="headerlink" title="第二种方式————发布/订阅（Topic）"></a>第二种方式————发布/订阅（Topic）</h4><h4 id="同步的方式-1"><a href="#同步的方式-1" class="headerlink" title="同步的方式"></a>同步的方式</h4><p>类似点对点中同步的方式，只是每个消费者都能收到生产者发出的全部消息，不再赘述。</p>
<h4 id="异步监听的方式-1"><a href="#异步监听的方式-1" class="headerlink" title="异步监听的方式"></a>异步监听的方式</h4><p>启动两个监听器（两个消费者），对消息进行异步监听。看是否各自能收到生产者发送的消息。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置两个监听器 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageListener"</span> <span class="attr">class</span>=<span class="string">"com.service.TopicMessageListener"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageListener2"</span> <span class="attr">class</span>=<span class="string">"com.service.TopicMessageListener2"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://osuskkx7k.bkt.clouddn.com/%E4%B8%A4%E4%B8%AA%E7%9B%91%E5%90%AC%E5%99%A8.jpg" alt="image"></p>
<p>可以看到，每个监听器各自都收到了生产者发送的10条消息。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ActiveMQ结合Spring收发消息&quot;&gt;&lt;a href=&quot;#ActiveMQ结合Spring收发消息&quot; class=&quot;headerlink&quot; title=&quot;ActiveMQ结合Spring收发消息&quot;&gt;&lt;/a&gt;ActiveMQ结合Spring收发消息&lt;/h3&gt;&lt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="ActiveMQ" scheme="http://yoursite.com/tags/ActiveMQ/"/>
    
      <category term="消息队列" scheme="http://yoursite.com/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>ActiveMQ的简单使用</title>
    <link href="http://yoursite.com/2018/02/12/ActiveMQ%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/02/12/ActiveMQ的简单使用/</id>
    <published>2018-02-12T07:12:12.000Z</published>
    <updated>2018-05-22T13:57:19.010Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ActiveMQ的简单使用"><a href="#ActiveMQ的简单使用" class="headerlink" title="ActiveMQ的简单使用"></a>ActiveMQ的简单使用</h3><p>ActiveMQ 是一种消息队列，是Apache提供的一个开源消息系统，完全采用Java实现，因此，它能很好地支持J2EE提出的JMS（Java Message Service,即Java消息服务）规范。</p>
<h4 id="第一种方式（点对点）——Queue"><a href="#第一种方式（点对点）——Queue" class="headerlink" title="第一种方式（点对点）——Queue"></a>第一种方式（点对点）——Queue</h4><h5 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</div><div class="line"><span class="keyword">import</span> javax.jms.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//连接工厂</span></div><div class="line">        ConnectionFactory connectionFactory;</div><div class="line">        <span class="comment">//连接</span></div><div class="line">        Connection connection = <span class="keyword">null</span>;</div><div class="line">        <span class="comment">//会话</span></div><div class="line">        Session session;</div><div class="line">        <span class="comment">//目的地</span></div><div class="line">        Destination destination;</div><div class="line">        <span class="comment">//消息生产者</span></div><div class="line">        MessageProducer messageProducer;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(ActiveMQConnectionFactory.DEFAULT_USER,ActiveMQConnectionFactory.DEFAULT_PASSWORD,</div><div class="line">                    ActiveMQConnectionFactory.DEFAULT_BROKER_URL);</div><div class="line">            connection = connectionFactory.createConnection();</div><div class="line">            connection.start();</div><div class="line">            session = connection.createSession(<span class="keyword">false</span>,Session.AUTO_ACKNOWLEDGE);   <span class="comment">//不开启事务</span></div><div class="line"></div><div class="line">            destination = session.createQueue(<span class="string">"Queue-zy"</span>);</div><div class="line">            messageProducer = session.createProducer(destination);</div><div class="line">            messageProducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);       <span class="comment">//是否持久化（默认持久化）</span></div><div class="line"></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;<span class="number">11</span>; i++)&#123;</div><div class="line">                System.out.println(<span class="string">"生产者成功发出消息——Queue-zy：序号---"</span>+i);</div><div class="line">                TextMessage message = session.createTextMessage(<span class="string">"消息-----"</span>+i+<span class="string">"-------hello,MQ!"</span>);</div><div class="line">                messageProducer.send(message);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (JMSException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                connection.close();</div><div class="line">            &#125; <span class="keyword">catch</span> (JMSException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>控制台打印出发送消息成功的语句，总计10条消息：</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">生产者成功发出消息——Queue-zy：序号<span class="comment">---1</span></div><div class="line">生产者成功发出消息——Queue-zy：序号<span class="comment">---2</span></div><div class="line">生产者成功发出消息——Queue-zy：序号<span class="comment">---3</span></div><div class="line">生产者成功发出消息——Queue-zy：序号<span class="comment">---4</span></div><div class="line">生产者成功发出消息——Queue-zy：序号<span class="comment">---5</span></div><div class="line">生产者成功发出消息——Queue-zy：序号<span class="comment">---6</span></div><div class="line">生产者成功发出消息——Queue-zy：序号<span class="comment">---7</span></div><div class="line">生产者成功发出消息——Queue-zy：序号<span class="comment">---8</span></div><div class="line">生产者成功发出消息——Queue-zy：序号<span class="comment">---9</span></div><div class="line">生产者成功发出消息——Queue-zy：序号<span class="comment">---10</span></div></pre></td></tr></table></figure>
<p><img src="http://osuskkx7k.bkt.clouddn.com/Queue1%20%282%29.jpg" alt="image"><br>此时，打开ActiveMQ的管理页面，点击Queues，便可看到一个名为 Queue-zy 的队列：<br>Number Of Pending Messages ：表示等待被消费的消息数为 10  </p>
<p>Messages Enqueued：  表示进入队列的消息数为 10  （可叠加）</p>
<p>Messages Dequeued：  表示出队列的消息，此时为0  </p>
<h5 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h5><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> javax.jms.*;</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</div><div class="line"></div><div class="line">        <span class="comment">//连接工厂</span></div><div class="line">        ConnectionFactory connectionFactory;</div><div class="line">        <span class="comment">//连接</span></div><div class="line">        Connection connection = <span class="literal">null</span>;</div><div class="line">        <span class="comment">//会话</span></div><div class="line">        Session session;</div><div class="line">        <span class="comment">//目的地</span></div><div class="line">        Destination destination;</div><div class="line">        <span class="comment">//消息生产者</span></div><div class="line">        MessageConsumer messageConsumer ;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(ActiveMQConnectionFactory.DEFAULT_USER,ActiveMQConnectionFactory.DEFAULT_PASSWORD,</div><div class="line">                    ActiveMQConnectionFactory.DEFAULT_BROKER_URL);</div><div class="line">            connection = connectionFactory.createConnection();</div><div class="line">            connection.start();</div><div class="line"></div><div class="line">            session = connection.createSession(<span class="literal">false</span>,Session.AUTO_ACKNOWLEDGE);</div><div class="line">            destination = session.createQueue(<span class="string">"Queue-zy"</span>);</div><div class="line">            messageConsumer = session.createConsumer(destination);</div><div class="line"></div><div class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</div><div class="line">                TextMessage textMessage = (TextMessage) messageConsumer.receive(<span class="number">10000</span>);</div><div class="line">                <span class="keyword">if</span>(textMessage != <span class="literal">null</span>)&#123;</div><div class="line">                    System.out.println(<span class="string">"消费者成功接收到消息： "</span>+textMessage.getText());</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                connection.close();</div><div class="line">            &#125; <span class="keyword">catch</span> (JMSException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>点击Run启动消费者Main()，可以看到控制台输出，成功接收10条消息：<br><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">消费者成功接收到消息：</span> <span class="comment">消息</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">1</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">hello</span><span class="string">,</span><span class="comment">MQ!</span></div><div class="line"><span class="comment">消费者成功接收到消息：</span> <span class="comment">消息</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">2</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">hello</span><span class="string">,</span><span class="comment">MQ!</span></div><div class="line"><span class="comment">消费者成功接收到消息：</span> <span class="comment">消息</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">3</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">hello</span><span class="string">,</span><span class="comment">MQ!</span></div><div class="line"><span class="comment">消费者成功接收到消息：</span> <span class="comment">消息</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">4</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">hello</span><span class="string">,</span><span class="comment">MQ!</span></div><div class="line"><span class="comment">消费者成功接收到消息：</span> <span class="comment">消息</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">5</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">hello</span><span class="string">,</span><span class="comment">MQ!</span></div><div class="line"><span class="comment">消费者成功接收到消息：</span> <span class="comment">消息</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">6</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">hello</span><span class="string">,</span><span class="comment">MQ!</span></div><div class="line"><span class="comment">消费者成功接收到消息：</span> <span class="comment">消息</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">7</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">hello</span><span class="string">,</span><span class="comment">MQ!</span></div><div class="line"><span class="comment">消费者成功接收到消息：</span> <span class="comment">消息</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">8</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">hello</span><span class="string">,</span><span class="comment">MQ!</span></div><div class="line"><span class="comment">消费者成功接收到消息：</span> <span class="comment">消息</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">9</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">hello</span><span class="string">,</span><span class="comment">MQ!</span></div><div class="line"><span class="comment">消费者成功接收到消息：</span> <span class="comment">消息</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">10</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">hello</span><span class="string">,</span><span class="comment">MQ!</span></div></pre></td></tr></table></figure></p>
<p><img src="http://osuskkx7k.bkt.clouddn.com/Queue-2.jpg" alt="image"></p>
<p>再次查看ActiveMQ的管理页面，点击Queues  </p>
<p>Number Of Pending Messages ：等待被消费的消息数变为 0，此时消息已经全部被消费  </p>
<p>Messages Enqueued： 进入队列的消息数为 10  （叠加）  </p>
<p>Messages Dequeued： 出队列的消息，此时为10  </p>
<h4 id="第二种方式（发布-订阅）——Topic"><a href="#第二种方式（发布-订阅）——Topic" class="headerlink" title="第二种方式（发布/订阅）——Topic"></a>第二种方式（发布/订阅）——Topic</h4><p><strong>两种方式的代码只有一处区别：由Session创建的目的地不同</strong></p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//Queue</div><div class="line"><span class="attribute">destination</span> = session.createQueue(<span class="string">"Queue-zy"</span>)<span class="comment">;</span></div><div class="line">//Topic</div><div class="line"><span class="attribute">destination</span> = session.createTopic(<span class="string">"Topic-zy"</span>)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>注意：<strong>先启动订阅者（消费者），再启动发布者（生产者）————因为在没有实现订阅消息持久化的情况下，只能在订阅者上线后才能接收到发布者发布的消息。</strong></p>
<h5 id="生产者-1"><a href="#生产者-1" class="headerlink" title="生产者"></a>生产者</h5><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> javax.jms.*;</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</div><div class="line"></div><div class="line">        <span class="comment">//连接工厂</span></div><div class="line">        ConnectionFactory connectionFactory;</div><div class="line">        <span class="comment">//连接</span></div><div class="line">        Connection connection = <span class="literal">null</span>;</div><div class="line">        <span class="comment">//会话</span></div><div class="line">        Session session;</div><div class="line">        <span class="comment">//目的地</span></div><div class="line">        Destination destination;</div><div class="line">        <span class="comment">//消息生产者</span></div><div class="line">        MessageProducer messageProducer;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(ActiveMQConnectionFactory.DEFAULT_USER,ActiveMQConnectionFactory.DEFAULT_PASSWORD,</div><div class="line">                    ActiveMQConnectionFactory.DEFAULT_BROKER_URL);</div><div class="line">            connection = connectionFactory.createConnection();</div><div class="line">            connection.start();</div><div class="line">            session = connection.createSession(<span class="literal">false</span>,Session.AUTO_ACKNOWLEDGE);   <span class="comment">//不开启事务</span></div><div class="line"></div><div class="line">            <span class="comment">//destination = session.createQueue("Queue-zy");</span></div><div class="line">            destination = session.createTopic(<span class="string">"Topic-zy"</span>);</div><div class="line">            messageProducer = session.createProducer(destination);</div><div class="line">            messageProducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);       <span class="comment">//是否持久化（默认持久化）</span></div><div class="line"></div><div class="line">            <span class="keyword">for</span>(int i = <span class="number">1</span>; i&lt;<span class="number">11</span>; i++)&#123;</div><div class="line">                System.out.println(<span class="string">"生产者成功发出消息——Topic-zy：序号---"</span>+i);</div><div class="line">                TextMessage message = session.createTextMessage(<span class="string">"消息-----"</span>+i+<span class="string">"-------hello,MQ!"</span>);</div><div class="line">                messageProducer.send(message);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (JMSException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                connection.close();</div><div class="line">            &#125; <span class="keyword">catch</span> (JMSException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="消费者-1"><a href="#消费者-1" class="headerlink" title="消费者 1"></a>消费者 1</h5><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span></div><div class="line"></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> javax.jms.*;</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</div><div class="line"></div><div class="line">        <span class="comment">//连接工厂</span></div><div class="line">        ConnectionFactory connectionFactory;</div><div class="line">        <span class="comment">//连接</span></div><div class="line">        Connection connection = <span class="literal">null</span>;</div><div class="line">        <span class="comment">//会话</span></div><div class="line">        Session session;</div><div class="line">        <span class="comment">//目的地</span></div><div class="line">        Destination destination;</div><div class="line">        <span class="comment">//消息生产者</span></div><div class="line">        MessageConsumer messageConsumer ;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(ActiveMQConnectionFactory.DEFAULT_USER,ActiveMQConnectionFactory.DEFAULT_PASSWORD,</div><div class="line">                    ActiveMQConnectionFactory.DEFAULT_BROKER_URL);</div><div class="line">            connection = connectionFactory.createConnection();</div><div class="line">            connection.start();</div><div class="line">            session = connection.createSession(<span class="literal">false</span>,Session.AUTO_ACKNOWLEDGE);</div><div class="line"></div><div class="line">            <span class="comment">//destination = session.createQueue("Queue-zy");</span></div><div class="line">            destination = session.createTopic(<span class="string">"Topic-zy"</span>);</div><div class="line">            messageConsumer = session.createConsumer(destination);</div><div class="line"></div><div class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</div><div class="line">                TextMessage textMessage = (TextMessage) messageConsumer.receive(<span class="number">10000</span>);</div><div class="line">                <span class="keyword">if</span>(textMessage != <span class="literal">null</span>)&#123;</div><div class="line">                    System.out.println(<span class="string">"消费者 1 成功接收到消息： "</span>+textMessage.getText());</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="消费者-2"><a href="#消费者-2" class="headerlink" title="消费者 2"></a>消费者 2</h5><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> javax.jms.*;</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer2</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</div><div class="line"></div><div class="line">        <span class="comment">//连接工厂</span></div><div class="line">        ConnectionFactory connectionFactory;</div><div class="line">        <span class="comment">//连接</span></div><div class="line">        Connection connection = <span class="literal">null</span>;</div><div class="line">        <span class="comment">//会话</span></div><div class="line">        Session session;</div><div class="line">        <span class="comment">//目的地</span></div><div class="line">        Destination destination;</div><div class="line">        <span class="comment">//消息生产者</span></div><div class="line">        MessageConsumer messageConsumer ;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(ActiveMQConnectionFactory.DEFAULT_USER,ActiveMQConnectionFactory.DEFAULT_PASSWORD,</div><div class="line">                    ActiveMQConnectionFactory.DEFAULT_BROKER_URL);</div><div class="line">            connection = connectionFactory.createConnection();</div><div class="line">            connection.start();</div><div class="line">            session = connection.createSession(<span class="literal">false</span>,Session.AUTO_ACKNOWLEDGE);</div><div class="line"></div><div class="line">            <span class="comment">//destination = session.createQueue("Queue-zy");</span></div><div class="line">            destination = session.createTopic(<span class="string">"Topic-zy"</span>);</div><div class="line">            messageConsumer = session.createConsumer(destination);</div><div class="line"></div><div class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</div><div class="line">                TextMessage textMessage = (TextMessage) messageConsumer.receive(<span class="number">10000</span>);</div><div class="line">                <span class="keyword">if</span>(textMessage != <span class="literal">null</span>)&#123;</div><div class="line">                    System.out.println(<span class="string">"消费者 2 成功接收到消息： "</span>+textMessage.getText());</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>先启动消费者 1 和 2，再启动生产者，可以看到控制台输出，消费者 1 、2都接收到了消息:</p>
<p><img src="http://osuskkx7k.bkt.clouddn.com/c1.jpg" alt="image"></p>
<p><img src="http://osuskkx7k.bkt.clouddn.com/c2.jpg" alt="image"></p>
<p><img src="http://osuskkx7k.bkt.clouddn.com/Topic-2.jpg" alt="image"></p>
<p>查看ActiveMQ的管理页面，点击Topics，查看名为 Topic-zy 的主题：    </p>
<p>Number Of Consumers ：表示消费者数目为 2    </p>
<p>Messages Enqueued： 进入队列的消息数为 10    </p>
<p>Messages Dequeued： 出队列的消息，为20 （因为2个消费者） </p>
<p>以上就是直接使用 ActiveMQ 在<strong>点对点</strong>和<strong>发布订阅</strong> 两种模式下收发消息的过程。</p>
<p>下一篇，将介绍<a href="http://youngforzy.top/2018/02/15/ActiveMQ%E7%BB%93%E5%90%88Spring%E6%94%B6%E5%8F%91%E6%B6%88%E6%81%AF/" target="_blank" rel="external">ActiveMQ结合Spring收发消息</a>的过程。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ActiveMQ的简单使用&quot;&gt;&lt;a href=&quot;#ActiveMQ的简单使用&quot; class=&quot;headerlink&quot; title=&quot;ActiveMQ的简单使用&quot;&gt;&lt;/a&gt;ActiveMQ的简单使用&lt;/h3&gt;&lt;p&gt;ActiveMQ 是一种消息队列，是Apache提供
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="ActiveMQ" scheme="http://yoursite.com/tags/ActiveMQ/"/>
    
      <category term="消息队列" scheme="http://yoursite.com/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Mysql自动还原脚本（.sh文件）</title>
    <link href="http://yoursite.com/2018/01/25/Mysql%E8%87%AA%E5%8A%A8%E8%BF%98%E5%8E%9F%E8%84%9A%E6%9C%AC/"/>
    <id>http://yoursite.com/2018/01/25/Mysql自动还原脚本/</id>
    <published>2018-01-25T07:12:12.000Z</published>
    <updated>2018-05-27T02:44:12.397Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Mysql自动还原脚本（-sh文件）"><a href="#Mysql自动还原脚本（-sh文件）" class="headerlink" title="Mysql自动还原脚本（.sh文件）"></a>Mysql自动还原脚本（.sh文件）</h3><h4 id="还原数据库的基本指令"><a href="#还原数据库的基本指令" class="headerlink" title="还原数据库的基本指令"></a>还原数据库的基本指令</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">source</span> d:/<span class="keyword">abc</span>.sql</div></pre></td></tr></table></figure>
<p>当连接数据库之后，可以直接使用 以上命令来还原指定数据库。</p>
<h4 id="自动还原脚本"><a href="#自动还原脚本" class="headerlink" title="自动还原脚本"></a>自动还原脚本</h4><p>那么能不能使用脚本的方式自动还原呢？<br><strong>当每次都是还原同一个数据库，或者还原同一个数据库中的指定表时，便可以采用脚本的方式执行。</strong></p>
<p>当数据库备份文件存储在云端时，可采用以下脚本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">HOSTNAME = <span class="string">"bd.gameplat2dev.db"</span>         <span class="comment">#数据库信息    </span></div><div class="line">PORT = <span class="string">"1516"</span>                                  <span class="comment">#端口</span></div><div class="line">USERNAME = <span class="string">"username"</span>                          <span class="comment">#用户名</span></div><div class="line">PASSWORD = <span class="string">"123456"</span>                            <span class="comment">#密码</span></div><div class="line"></div><div class="line">DBNAME = <span class="string">"game_product"</span>                        <span class="comment">#数据库名称</span></div><div class="line"><span class="comment">#TABLENAME1 = "t_approve"                      #表名</span></div><div class="line"><span class="comment">#TABLENAME2 = "t_approve_role"  </span></div><div class="line"></div><div class="line"><span class="comment">#sql文件下载路径</span></div><div class="line">URL = <span class="string">"http://osuskkx7k.bkt.clouddn.com/ab.sql"</span></div><div class="line"></div><div class="line"><span class="comment">#定义文件名（自定义）</span></div><div class="line">FILE = <span class="string">"sqlfile.sql"</span></div><div class="line"></div><div class="line"><span class="comment">#下载sql文件</span></div><div class="line">wget <span class="variable">$&#123;URL&#125;</span> -O <span class="variable">$&#123;FILE&#125;</span></div><div class="line"></div><div class="line"><span class="comment">#输出(可无)</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$&#123;FILE&#125;</span></div><div class="line"></div><div class="line"><span class="comment">#定义 source 命令</span></div><div class="line">restore_sql = <span class="string">"source  <span class="variable">$&#123;FILE&#125;</span>"</span></div><div class="line"></div><div class="line"><span class="comment">#还原指令</span></div><div class="line">mysql -h<span class="variable">$&#123;HOSTNAME&#125;</span>  -P<span class="variable">$&#123;PORT&#125;</span>  -u<span class="variable">$&#123;USERNAME&#125;</span> -p<span class="variable">$&#123;PASSWORD&#125;</span> <span class="variable">$&#123;DBNAME&#125;</span> -e<span class="string">"<span class="variable">$&#123;restore_sql&#125;</span>"</span></div></pre></td></tr></table></figure>
<p><strong>记得另存为时，后缀是 .sh，双击即可运行</strong></p>
<h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><ul>
<li>若为本地数据库可将数据库名改为 localhost ，端口无需指定</li>
<li>脚本中 wget 工具需要安装</li>
<li>若sql文件不是存储云端，可直接指定路径</li>
<li>FILE文件名可自定义</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Mysql自动还原脚本（-sh文件）&quot;&gt;&lt;a href=&quot;#Mysql自动还原脚本（-sh文件）&quot; class=&quot;headerlink&quot; title=&quot;Mysql自动还原脚本（.sh文件）&quot;&gt;&lt;/a&gt;Mysql自动还原脚本（.sh文件）&lt;/h3&gt;&lt;h4 id=&quot;还
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
      <category term="自动还原脚本" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E8%BF%98%E5%8E%9F%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>Map 的4种遍历方式及比较</title>
    <link href="http://yoursite.com/2018/01/07/Map%20%E7%9A%844%E7%A7%8D%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F%E5%8F%8A%E6%AF%94%E8%BE%83/"/>
    <id>http://yoursite.com/2018/01/07/Map 的4种遍历方式及比较/</id>
    <published>2018-01-07T07:12:12.000Z</published>
    <updated>2018-04-14T16:37:56.168Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Map-的4种遍历方式及比较"><a href="#Map-的4种遍历方式及比较" class="headerlink" title="Map 的4种遍历方式及比较"></a>Map 的4种遍历方式及比较</h3><h4 id="KeySet"><a href="#KeySet" class="headerlink" title="KeySet"></a>KeySet</h4><p>第一种方式：   <strong>keySet 其实遍历了两次，第一次获取Iterator，第二次根据key获取value，因此性能较差。</strong><br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> testKetSet(Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; <span class="built_in">map</span>) &#123;</div><div class="line">    Set&lt;<span class="keyword">String</span>&gt; keys = <span class="built_in">map</span>.keySet();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">String</span> <span class="built_in">key</span> : keys) &#123;</div><div class="line">        <span class="keyword">String</span> value =  <span class="built_in">map</span>.<span class="built_in">get</span>(<span class="built_in">key</span>);</div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"key: "</span>+ <span class="built_in">key</span> + <span class="string">"  value: "</span> + value );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="EntrySet"><a href="#EntrySet" class="headerlink" title="EntrySet"></a>EntrySet</h4><p>第二种方式: <strong>entrySet 优于keySet，因为一次就把key和value放入了entry)</strong><br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">public</span> void testEntrySet(<span class="meta">Map</span>&lt;<span class="keyword">String, </span><span class="keyword">String&gt; </span><span class="meta">map</span>) &#123;</div><div class="line">      Set&lt;<span class="meta">Map</span>.Entry&lt;<span class="keyword">String, </span><span class="keyword">String&gt;&gt; </span><span class="meta">entry</span> = <span class="meta">map</span>.entrySet()<span class="comment">;</span></div><div class="line">      for (<span class="meta">Map</span>.Entry&lt;<span class="keyword">String, </span><span class="keyword">String&gt; </span><span class="keyword">stringEntry </span>: <span class="meta">entry</span>) &#123;</div><div class="line">          System.out.println(<span class="string">"key: "</span>+ <span class="keyword">stringEntry.getKey() </span>+ <span class="string">"  value: "</span> + <span class="keyword">stringEntry.getValue());</span></div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h4 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h4><p>第三种方式：<strong>Iterator （可用 it.remove()在遍历时删除）</strong><br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> public void testIterator(<span class="meta">Map</span>&lt;<span class="keyword">String, </span><span class="keyword">String&gt; </span><span class="meta">map</span>) &#123;</div><div class="line">        <span class="keyword">Iterator&lt;Map.Entry&lt;String, </span><span class="keyword">String&gt;&gt; </span><span class="keyword">it </span>= <span class="meta">map</span>.entrySet().<span class="keyword">iterator();</span></div><div class="line">        <span class="meta">while</span> (<span class="keyword">it.hasNext()) </span>&#123;</div><div class="line">            <span class="meta">Map</span>.Entry&lt;<span class="keyword">String, </span><span class="keyword">String&gt; </span>entry1 = <span class="keyword">it.next();</span></div><div class="line">            System.out.println(<span class="string">"key: "</span>+ entry1.getKey() + <span class="string">"  value: "</span> + entry1.getValue())<span class="comment">;</span></div><div class="line">//            <span class="meta">if</span> (<span class="string">"1"</span>.equals(entry1.getKey())) &#123;</div><div class="line">//                <span class="keyword">it.remove();</span></div><div class="line">//            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h4 id="Lambda-（JDK8）"><a href="#Lambda-（JDK8）" class="headerlink" title="Lambda （JDK8）"></a>Lambda （JDK8）</h4><p>第四种方式：Lambda （<strong>本质是 entrySet</strong>）<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> testLambda(Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; <span class="built_in">map</span>) &#123;</div><div class="line">       <span class="built_in">map</span>.forEach((<span class="built_in">key</span>, value) -&gt; &#123;</div><div class="line">           System.out.<span class="built_in">println</span>(<span class="string">"key: "</span>+ <span class="built_in">key</span> + <span class="string">"  value: "</span> + value );</div><div class="line">       &#125;);</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h4 id="Values"><a href="#Values" class="headerlink" title="Values"></a>Values</h4><p>获取map所有的值，values()返回的是一个集合 <strong>Collection（可转List/Set）</strong><br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> testValues(Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; <span class="built_in">map</span>) &#123;</div><div class="line">       Collection&lt;<span class="keyword">String</span>&gt; collection = <span class="built_in">map</span>.values();</div><div class="line">       <span class="built_in">for</span> (<span class="keyword">String</span> s : collection) &#123;</div><div class="line">           System.out.<span class="built_in">println</span>(<span class="string">"value: "</span> + s);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Map-的4种遍历方式及比较&quot;&gt;&lt;a href=&quot;#Map-的4种遍历方式及比较&quot; class=&quot;headerlink&quot; title=&quot;Map 的4种遍历方式及比较&quot;&gt;&lt;/a&gt;Map 的4种遍历方式及比较&lt;/h3&gt;&lt;h4 id=&quot;KeySet&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="HashMap" scheme="http://yoursite.com/tags/HashMap/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java(spring)实现Mysql的定时备份与还原</title>
    <link href="http://yoursite.com/2017/12/25/Java(spring)%E5%AE%9E%E7%8E%B0Mysql%E7%9A%84%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BD%E4%B8%8E%E8%BF%98%E5%8E%9F/"/>
    <id>http://yoursite.com/2017/12/25/Java(spring)实现Mysql的定时备份与还原/</id>
    <published>2017-12-25T11:23:12.000Z</published>
    <updated>2018-02-24T18:19:31.342Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、数据库的定时备份"><a href="#一、数据库的定时备份" class="headerlink" title="一、数据库的定时备份"></a>一、数据库的定时备份</h3><h4 id="备份命令"><a href="#备份命令" class="headerlink" title="备份命令"></a>备份命令</h4><p>Mysql的备份指令：</p>
<ol>
<li>指定数据库：<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqldump -h localhost -uroot -proot  tuser&gt;d:\user_2017<span class="string">-12</span><span class="string">-25</span>_15<span class="string">-42</span><span class="string">-10</span>.sql</div></pre></td></tr></table></figure>
</li>
</ol>
<p>tuser：数据库名<br>user_2017-12-25_15-42-10.sql：文件名</p>
<ol>
<li>指定数据库中的多个表：</li>
</ol>
<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqldump -h localhost -uroot -proot --databases tuser --tables t_user t_user2&gt;d:\user_2017<span class="string">-12</span><span class="string">-25</span>_15<span class="string">-42</span>-two.sql</div></pre></td></tr></table></figure>
<p>在 –tables 之后加上所需备份的表名</p>
<h4 id="定时（Spring-Task）"><a href="#定时（Spring-Task）" class="headerlink" title="定时（Spring-Task）"></a>定时（Spring-Task）</h4><p>了解了mysql的备份命令，那么如何实现定时呢？<br><strong>这里采用Spring的定时任务来实现，基于注解的方式。</strong></p>
<p>主要有两点注意：</p>
<h5 id="1-Spring-xml中开启定时任务注解的配置："><a href="#1-Spring-xml中开启定时任务注解的配置：" class="headerlink" title="1. Spring.xml中开启定时任务注解的配置："></a>1. Spring.xml中开启定时任务注解的配置：</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">&lt;!--开启定时任务注解--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">task:annotation-driven</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>注意在头部引入task的标签及描述</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">xmlns:</span>task=<span class="string">"http://www.springframework.org/schema/task"</span></div><div class="line"><span class="symbol">http:</span>//www.springframework<span class="meta">.org</span>/schema/task</div><div class="line"><span class="symbol">http:</span>//www.springframework<span class="meta">.org</span>/schema/task/spring-task<span class="number">-4.0</span>.xsd</div></pre></td></tr></table></figure>
<h5 id="2-在相应的方法中添加注解-Scheduled"><a href="#2-在相应的方法中添加注解-Scheduled" class="headerlink" title="2.在相应的方法中添加注解@Scheduled"></a>2.在相应的方法中添加注解@Scheduled</h5><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Scheduled</span>(cron=<span class="string">"0/5 * *  * * ? "</span>)   <span class="comment">//每5秒执行一次</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">task1</span><span class="params">()</span></span>&#123;</div><div class="line">    System.out.println(<span class="string">"北京时间："</span>+<span class="keyword">new</span> Date());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意(cron=”0/5 <em> </em>  <em> </em> ? “)  表达式</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cron=<span class="string">"0/5 * *  * * ? "</span>   表示每隔5s执行一次</div><div class="line">cron=<span class="string">" * * 0/1 * * ? "</span>   表示每隔1小时执行一次</div><div class="line"></div><div class="line">关于cronExpression的配置可以百度</div></pre></td></tr></table></figure>
<p>对数据库  tuser  中的两张表 t_user 和 t_user2 进行备份:<br>代码如下：</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定时备份方案</span></div><div class="line">   @Scheduled(cron=<span class="string">"0/5 * *  * * ? "</span>)   <span class="comment">//每5秒执行一次  @Scheduled(cron=" * * 0/1 * * ? ") 每小时一次</span></div><div class="line">   <span class="keyword">public</span> <span class="keyword">void</span> back()&#123;</div><div class="line">       System.out.<span class="built_in">println</span>(<span class="string">"现在时间是"</span>+<span class="keyword">new</span> Date());</div><div class="line">       Runtime runtime = Runtime.getRuntime();  <span class="comment">//获取Runtime实例</span></div><div class="line">       <span class="keyword">String</span> user = <span class="string">"root"</span>;</div><div class="line">       <span class="keyword">String</span> password = <span class="string">"root"</span>;</div><div class="line">       <span class="keyword">String</span> database1 = <span class="string">"tuser"</span>; <span class="comment">// 需要备份的数据库名</span></div><div class="line">       <span class="keyword">String</span> table1 = <span class="string">"t_user"</span>;</div><div class="line">       <span class="keyword">String</span> table2 = <span class="string">"t_user2"</span>;</div><div class="line">       Date currentDate = <span class="keyword">new</span> Date();</div><div class="line">       SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd_HH-mm-ss"</span>);</div><div class="line">       <span class="keyword">String</span> sdfDate = sdf.format(currentDate);</div><div class="line">       <span class="keyword">String</span> filepath = <span class="string">"d:\\time_"</span> + sdfDate + <span class="string">".sql"</span>; <span class="comment">// 备份的路径地址</span></div><div class="line">       <span class="comment">//执行命令</span></div><div class="line">       <span class="keyword">String</span> stmt = <span class="string">"mysqldump  -h localhost -u "</span>+user+<span class="string">" -p"</span>+password+<span class="string">" --databases "</span>+database1+<span class="string">" --tables "</span>+table1+<span class="string">" "</span>+table2 +<span class="string">" &gt; "</span>+filepath;   </div><div class="line">       System.out.<span class="built_in">println</span>(stmt);</div><div class="line">       <span class="built_in">try</span> &#123;</div><div class="line">           <span class="keyword">String</span>[] command = &#123; <span class="string">"cmd"</span>, <span class="string">"/c"</span>, stmt&#125;;</div><div class="line">           <span class="built_in">Process</span> <span class="built_in">process</span> = runtime.exec(command);</div><div class="line">           InputStream input = <span class="built_in">process</span>.getInputStream();</div><div class="line">           System.out.<span class="built_in">println</span>(IOUtils.toString(input, <span class="string">"UTF-8"</span>));</div><div class="line">           <span class="comment">//若有错误信息则输出</span></div><div class="line">           InputStream errorStream = <span class="built_in">process</span>.getErrorStream();</div><div class="line">           System.out.<span class="built_in">println</span>(IOUtils.toString(errorStream, <span class="string">"UTF-8"</span>));</div><div class="line">       &#125; <span class="built_in">catch</span> (IOException e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="二、数据库的还原"><a href="#二、数据库的还原" class="headerlink" title="二、数据库的还原"></a>二、数据库的还原</h3><h4 id="还原命令"><a href="#还原命令" class="headerlink" title="还原命令"></a>还原命令</h4><p>可以通过两种方式来进行还原操作。</p>
<h5 id="1-mysql-利用sql文件还原数据库"><a href="#1-mysql-利用sql文件还原数据库" class="headerlink" title="1. mysql 利用sql文件还原数据库"></a>1. mysql 利用sql文件还原数据库</h5><figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -h localhost -uroot -proot tuser&lt; D:\user_2017<span class="string">-12</span><span class="string">-25</span>_15<span class="string">-42</span><span class="string">-10</span>.sql</div></pre></td></tr></table></figure>
<h5 id="2-source-命令"><a href="#2-source-命令" class="headerlink" title="2. source 命令"></a>2. source 命令</h5><p>这也是导入sql文件的方式，登录mysql之后，输入：<br><figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source d:/game_product2018<span class="string">-01</span><span class="string">-02</span>_10<span class="string">-41</span><span class="string">-30</span>.sql</div></pre></td></tr></table></figure></p>
<p>注意反斜杠的方向，“source d:\ab.sql” 这样会执行失败。<br><strong>注：在Navicat中无法使用 source 命令</strong></p>
<h4 id="还原"><a href="#还原" class="headerlink" title="还原"></a>还原</h4><p>在代码中采用第一种方式实现还原操作</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> restore() &#123;</div><div class="line">    <span class="keyword">String</span> user = <span class="string">"root"</span>;</div><div class="line">    <span class="keyword">String</span> password = <span class="string">"root"</span>;</div><div class="line">    <span class="keyword">String</span> database = <span class="string">"tuser"</span>; <span class="comment">// 需要备份的数据库名</span></div><div class="line">    System.out.<span class="built_in">println</span>(<span class="string">"现在时间是"</span> + <span class="keyword">new</span> Date());</div><div class="line">    Runtime runtime = Runtime.getRuntime();</div><div class="line"></div><div class="line">    <span class="keyword">String</span> cmd = <span class="string">"mysql  -h localhost"</span> + <span class="string">" -u "</span> + user + <span class="string">" -p"</span> + password + <span class="string">" "</span> + database;</div><div class="line">    System.out.<span class="built_in">println</span>(cmd);</div><div class="line">    <span class="built_in">try</span> &#123;</div><div class="line">        <span class="keyword">String</span> filePath =  <span class="string">"D:\\user_2017-12-25_15-42-10.sql"</span>; <span class="comment">// sql文件路径</span></div><div class="line">        <span class="keyword">String</span> stmt = cmd + <span class="string">" &lt; "</span> + filePath;</div><div class="line">        <span class="keyword">String</span>[] command = &#123;<span class="string">"cmd"</span>, <span class="string">"/c"</span>, stmt&#125;;</div><div class="line">        <span class="built_in">Process</span> <span class="built_in">process</span> = runtime.exec(command);</div><div class="line">        <span class="comment">//若有错误信息则输出</span></div><div class="line">        InputStream errorStream = <span class="built_in">process</span>.getErrorStream();</div><div class="line">        System.out.<span class="built_in">println</span>(IOUtils.toString(errorStream, <span class="string">"utf-8"</span>));</div><div class="line">        <span class="comment">//等待操作</span></div><div class="line">        <span class="keyword">int</span> processComplete = <span class="built_in">process</span>.waitFor();</div><div class="line">        <span class="built_in">if</span> (processComplete == <span class="number">0</span>) &#123;</div><div class="line">            System.out.<span class="built_in">println</span>(<span class="string">"还原成功."</span>);</div><div class="line">        &#125; <span class="built_in">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"还原数据库失败."</span>);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="built_in">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、数据库的定时备份&quot;&gt;&lt;a href=&quot;#一、数据库的定时备份&quot; class=&quot;headerlink&quot; title=&quot;一、数据库的定时备份&quot;&gt;&lt;/a&gt;一、数据库的定时备份&lt;/h3&gt;&lt;h4 id=&quot;备份命令&quot;&gt;&lt;a href=&quot;#备份命令&quot; class=&quot;head
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="spring定时任务" scheme="http://yoursite.com/tags/spring%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    
      <category term="Mysql备份还原" scheme="http://yoursite.com/tags/Mysql%E5%A4%87%E4%BB%BD%E8%BF%98%E5%8E%9F/"/>
    
  </entry>
  
  <entry>
    <title>中缀表达式转后缀表达式（逆波兰）</title>
    <link href="http://yoursite.com/2017/12/18/%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BD%AC%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E9%80%86%E6%B3%A2%E5%85%B0%EF%BC%89/"/>
    <id>http://yoursite.com/2017/12/18/中缀表达式转后缀表达式（逆波兰）/</id>
    <published>2017-12-18T11:23:12.000Z</published>
    <updated>2018-02-24T18:13:36.958Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、中缀表达式转后缀表达式"><a href="#一、中缀表达式转后缀表达式" class="headerlink" title="一、中缀表达式转后缀表达式"></a>一、中缀表达式转后缀表达式</h3><p>中缀表达式就是普通的表达式。如：9+（3-1）*3+10/2<br>后缀表达式是一种不需要括号的表示法，又叫逆波兰表达式。</p>
<p>上面的式子用后缀法表示：9 3 1 - 3 * + 10 2 / +</p>
<p>那么如何转化成后缀表达式？</p>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>从左往右遍历：<br><strong>1. 如果是数字则直接输出</strong><br><strong>2. 如果是符号则入栈，但要通过以下判断</strong></p>
<ul>
<li><strong>若该符号c是右括号或者c的优先级≤栈顶符号，则栈中元素依次出栈输出，c入栈</strong></li>
</ul>
<p>代码实现：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//中缀转后缀表达式（逆波兰）------栈实现</span></div><div class="line"><span class="keyword">public</span> class NiPoLan2 &#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">		<span class="comment">//创建栈</span></div><div class="line">		Stack&lt;<span class="keyword">String</span>&gt; s = <span class="keyword">new</span> Stack&lt;<span class="keyword">String</span>&gt;();</div><div class="line">		<span class="keyword">String</span> s1 = <span class="string">"9+(3-1)*3+10/2"</span>; 	<span class="comment">//例子  (1-2)*(4+5)   9+(3-1)*3+10/2</span></div><div class="line">		<span class="keyword">char</span>[] o = s1.toCharArray();</div><div class="line">		<span class="keyword">String</span> r = <span class="string">""</span>;	<span class="comment">//字符串r记录输出</span></div><div class="line">		<span class="comment">//遍历</span></div><div class="line">		<span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;o.length;i++)&#123;</div><div class="line">		<span class="comment">//符号是数字</span></div><div class="line">		<span class="built_in">if</span>(Character.isDigit(o[i]))&#123;</div><div class="line">			<span class="comment">//判断两位整数，如10</span></div><div class="line">			<span class="built_in">if</span>(i&lt;o.length<span class="number">-1</span>&amp;&amp;Character.isDigit(o[i+<span class="number">1</span>]))&#123;</div><div class="line">				r = r+o[i]+o[i+<span class="number">1</span>]+<span class="string">" "</span>;</div><div class="line">				i++; <span class="comment">//减少一次循环</span></div><div class="line">				<span class="built_in">continue</span>;</div><div class="line">			&#125;</div><div class="line">			r = r+o[i]+<span class="string">" "</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//符号是 (</span></div><div class="line">		<span class="built_in">if</span>(o[i]==<span class="string">'('</span>)&#123;</div><div class="line">			s.push(o[i]+<span class="string">""</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//符号是+ or -</span></div><div class="line">		<span class="built_in">if</span>(o[i]==<span class="string">'+'</span>|o[i]==<span class="string">'-'</span>)&#123;</div><div class="line">			<span class="comment">//栈不为空，且有乘除符号，则弹出</span></div><div class="line">			<span class="built_in">if</span>(!s.isEmpty()&amp;&amp;(s.<span class="built_in">peek</span>().equals(<span class="string">"*"</span>)|s.<span class="built_in">peek</span>().equals(<span class="string">"/"</span>)))&#123;</div><div class="line">				<span class="comment">//全部出栈</span></div><div class="line">				<span class="built_in">while</span>(!s.isEmpty())&#123;</div><div class="line">					r = r + s.pop()+<span class="string">" "</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="comment">//出栈后，再将+-入栈</span></div><div class="line">				s.push(o[i]+<span class="string">""</span>);</div><div class="line">				<span class="comment">//栈为空</span></div><div class="line">			&#125;<span class="built_in">else</span>&#123;</div><div class="line">				s.push(o[i]+<span class="string">""</span>);</div><div class="line">				System.out.<span class="built_in">println</span>(o[i]+<span class="string">""</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//符号是右括号则配对</span></div><div class="line">		<span class="built_in">if</span>(o[i]==<span class="string">')'</span>)&#123;</div><div class="line">			<span class="keyword">String</span> a = s.pop();</div><div class="line">			System.out.<span class="built_in">println</span>(a);</div><div class="line">			r = r + a+<span class="string">" "</span>;</div><div class="line">			s.pop();</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//符号是乘除</span></div><div class="line">		<span class="built_in">if</span>(o[i]==<span class="string">'*'</span>|o[i]==<span class="string">'/'</span>)&#123;</div><div class="line">			System.out.<span class="built_in">println</span>(s.<span class="built_in">peek</span>());</div><div class="line">			<span class="comment">//栈顶是加减、括号</span></div><div class="line">			<span class="built_in">if</span>(s.isEmpty())&#123;</div><div class="line">				s.push(o[i]+<span class="string">""</span>);</div><div class="line">			&#125;<span class="built_in">else</span> <span class="built_in">if</span>(s.<span class="built_in">peek</span>().equals(<span class="string">"+"</span>)|s.<span class="built_in">peek</span>().equals(<span class="string">"-"</span>)|s.<span class="built_in">peek</span>().equals(<span class="string">"("</span>))&#123;	<span class="comment">//s.peek()=="-"|s.peek()=="+"|s.peek()=="("</span></div><div class="line">				s.push(o[i]+<span class="string">""</span>);</div><div class="line">			&#125;</div><div class="line">		    <span class="comment">//栈顶是乘除，则出栈</span></div><div class="line">			<span class="built_in">else</span> <span class="built_in">if</span>(s.<span class="built_in">peek</span>()==<span class="string">"*"</span>|s.<span class="built_in">peek</span>()==<span class="string">"/"</span>)&#123;</div><div class="line">				<span class="comment">//全部出栈</span></div><div class="line">				<span class="built_in">while</span>(!s.isEmpty())&#123;</div><div class="line">					r = r + s.pop();</div><div class="line">				&#125;</div><div class="line">				s.push(o[i]+<span class="string">""</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//最后栈中不为空，全部出栈</span></div><div class="line">		<span class="built_in">while</span>(!s.isEmpty())&#123;</div><div class="line">			r = r + s.pop()+<span class="string">" "</span>; </div><div class="line">		&#125;</div><div class="line">		System.out.<span class="built_in">println</span>(r);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果：<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">9 </span><span class="number">3</span> <span class="number">1</span> - <span class="number">3</span> * + <span class="number">10</span> <span class="number">2</span> / +</div></pre></td></tr></table></figure></p>
<h3 id="二、计算后缀表达式"><a href="#二、计算后缀表达式" class="headerlink" title="二、计算后缀表达式"></a>二、计算后缀表达式</h3><p>中缀表达式容易计算：9+（3-1）*3+10/2=20<br>那么后缀表达式如何计算呢？</p>
<p>还是上面的例子： 9 3 1 - 3 * + 10 2 / + </p>
<h4 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h4><p><strong>从左往右遍历：</strong>   </p>
<ol>
<li><strong>遇到数字就入栈</strong>  </li>
<li><strong>遇到符号就将栈顶的两个元素取出计算，将结果入栈；最后栈中的数就是最终结果</strong></li>
</ol>
<p>代码实现：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class NiPoLan &#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">		</div><div class="line">		Stack&lt;Integer&gt; s = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">		<span class="keyword">String</span> s1 = <span class="string">"9 3 1 - 3 * + 10 2 / +"</span>;</div><div class="line">		<span class="keyword">String</span>[] r = s1.<span class="built_in">split</span>(<span class="string">" "</span>);				<span class="comment">//转为字符串数组</span></div><div class="line">		System.out.<span class="built_in">println</span>(s1);</div><div class="line">		<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;r.length;i++)&#123;</div><div class="line">			<span class="comment">//判断字符串r[i]是数字还是符号</span></div><div class="line">			<span class="comment">//r[i]是数字，入栈</span></div><div class="line">			<span class="keyword">if</span>(Character.isDigit(r[i].charAt(<span class="number">0</span>)))&#123;</div><div class="line">				<span class="built_in">int</span> c = Integer.valueOf(r[i]);</div><div class="line">				s.push(c);</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				<span class="comment">//r[i]是符号，则运算</span></div><div class="line">				<span class="keyword">switch</span> (r[i]) &#123;</div><div class="line">				<span class="keyword">case</span> <span class="string">"-"</span>:</div><div class="line">					<span class="built_in">int</span> a = s.pop();  </div><div class="line">					<span class="built_in">int</span> b = s.pop();  </div><div class="line">					s.push(b-a);</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				<span class="keyword">case</span> <span class="string">"+"</span>:</div><div class="line">					 a = s.pop();  </div><div class="line">					 b = s.pop();  </div><div class="line">					s.push(b+a); </div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				<span class="keyword">case</span> <span class="string">"/"</span>:</div><div class="line">					 a = s.pop();  </div><div class="line">					 b = s.pop();  </div><div class="line">					s.push(b/a);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">				<span class="keyword">case</span> <span class="string">"*"</span>:</div><div class="line">					 a = s.pop();  </div><div class="line">					 b = s.pop();  </div><div class="line">					s.push(b*a);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">				<span class="keyword">default</span>:</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">	&#125;</div><div class="line">		<span class="comment">//输出结果</span></div><div class="line">		System.out.<span class="built_in">println</span>(s.pop());</div><div class="line">	&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>输出结果：<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">9 </span><span class="number">3</span> <span class="number">1</span> - <span class="number">3</span> * + <span class="number">10</span> <span class="number">2</span> / +</div><div class="line"><span class="number">20</span></div></pre></td></tr></table></figure></p>
<p>结果为 20。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、中缀表达式转后缀表达式&quot;&gt;&lt;a href=&quot;#一、中缀表达式转后缀表达式&quot; class=&quot;headerlink&quot; title=&quot;一、中缀表达式转后缀表达式&quot;&gt;&lt;/a&gt;一、中缀表达式转后缀表达式&lt;/h3&gt;&lt;p&gt;中缀表达式就是普通的表达式。如：9+（3-1）*3+
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="逆波兰表达式" scheme="http://yoursite.com/tags/%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java并发工具类之Semaphore</title>
    <link href="http://yoursite.com/2017/12/12/Java%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%B9%8BSemaphore/"/>
    <id>http://yoursite.com/2017/12/12/Java并发工具类之Semaphore/</id>
    <published>2017-12-12T09:42:18.000Z</published>
    <updated>2018-02-24T18:08:10.476Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Semaphore的概念"><a href="#一、Semaphore的概念" class="headerlink" title="一、Semaphore的概念"></a>一、Semaphore的概念</h3><p><strong>Semaphore又叫信号量，用来控制同时访问特定资源的线程数量</strong>。它通过协调各个线程，以保证合理地使用公共资源。</p>
<p><strong>Semaphore和CountDownLatch一样，也是维护了一个计数器，其本质是一个共享锁。</strong></p>
<p><strong>Semaphore有公平性和非公平性之分。</strong></p>
<p><strong>Semaphore的工作过程：</strong></p>
<p><img src="http://osuskkx7k.bkt.clouddn.com/timg.jpg" alt="image">  </p>
<ol>
<li>当一个线程想要访问某个共享资源时，它必须要先获取Semaphore；</li>
<li>当Semaphore &gt; 0 时，获取该资源并使Semaphore – 1；</li>
<li>当Semaphore = 0，则表示全部的共享资源已经被其他线程全部占用，线程必须要等待其他线程释放资源；</li>
<li>当有线程释放资源时，Semaphore+1，其他线程可以争抢资源；</li>
</ol>
<h3 id="二、Semaphore的实现分析"><a href="#二、Semaphore的实现分析" class="headerlink" title="二、Semaphore的实现分析"></a>二、Semaphore的实现分析</h3><p>前面分析可知，<strong>Semaphore的实现是共享锁。</strong></p>
<h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>Semaphore有两个构造函数。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Semaphore</span><span class="params">(<span class="keyword">int</span> permits)</span> </span>&#123;</div><div class="line">        sync = <span class="keyword">new</span> NonfairSync(permits);</div><div class="line">    &#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Semaphore</span><span class="params">(<span class="keyword">int</span> permits, <span class="keyword">boolean</span> fair)</span> </span>&#123;</div><div class="line">    sync = fair ? <span class="keyword">new</span> FairSync(permits) : <span class="keyword">new</span> NonfairSync(permits);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>第一个构造函数中传入的是资源许可的数量，默认是非公平锁。<br>第二个构造函数传入资源许可的数量和一个boolean变量，该变量可实现公平锁。</p>
<p>Semaphore在使用时有两个主要方法，acquire()方法表示获取一个资源许可，而 release()方法表示释放一个资源许可。</p>
<h4 id="资源获取：acquire-方法"><a href="#资源获取：acquire-方法" class="headerlink" title="资源获取：acquire()方法"></a>资源获取：acquire()方法</h4><p>调用acquire()方法获取一个资源：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">acquire</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        sync.acquireSharedInterruptibly(<span class="number">1</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>该方法调用AQS的acquireSharedInterruptibly()方法，以共享的模式获取同步状态：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">acquireSharedInterruptibly</span><span class="params">(<span class="keyword">int</span> arg)</span></span></div><div class="line">            <span class="keyword">throws</span> InterruptedException &#123;</div><div class="line">        <span class="keyword">if</span> (Thread.interrupted())</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</div><div class="line">        <span class="keyword">if</span> (tryAcquireShared(arg) &lt; <span class="number">0</span>)</div><div class="line">            doAcquireSharedInterruptibly(arg);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>然后调用tryAcquireShared()方法，该方法由Sync的子类来实现：</p>
<ul>
<li>如果是非公平模式，调用NonfairSync的tryAcquireShared()方法；</li>
<li>如果是公平模式，调用FairSync的tryAcquireShared()方法。</li>
</ul>
<p>在前面的文章 <a href="http://blog.csdn.net/babylove_bale/article/details/78317204" target="_blank" rel="external">ReentrantLock重入锁</a> 中有提到公平与非公平的实现。</p>
<p><strong>非公平模式</strong><br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">final <span class="keyword">int</span> nonfairTryAcquireShared(<span class="keyword">int</span> acquires) &#123;</div><div class="line">            <span class="built_in">for</span> (;;) &#123;</div><div class="line">                <span class="keyword">int</span> <span class="built_in">available</span> = getState();</div><div class="line">                <span class="keyword">int</span> remaining = <span class="built_in">available</span> - acquires;</div><div class="line">                <span class="built_in">if</span> (remaining &lt; <span class="number">0</span> ||</div><div class="line">                    compareAndSetState(<span class="built_in">available</span>, remaining))</div><div class="line">                    <span class="built_in">return</span> remaining;</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>remaining 表示剩余的资源许可，如果&lt; 0，表示目前没有剩余的许可。当前线程继续等待。如果remaining &gt;0 则执行CAS操作获取资源许可。</p>
<p><strong>公平模式</strong></p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> <span class="keyword">int</span> tryAcquireShared(<span class="keyword">int</span> acquires) &#123;</div><div class="line">            <span class="built_in">for</span> (;;) &#123;</div><div class="line">                <span class="built_in">if</span> (hasQueuedPredecessors())</div><div class="line">                    <span class="built_in">return</span> <span class="number">-1</span>;</div><div class="line">                <span class="keyword">int</span> <span class="built_in">available</span> = getState();</div><div class="line">                <span class="keyword">int</span> remaining = <span class="built_in">available</span> - acquires;</div><div class="line">                <span class="built_in">if</span> (remaining &lt; <span class="number">0</span> ||</div><div class="line">                    compareAndSetState(<span class="built_in">available</span>, remaining))</div><div class="line">                    <span class="built_in">return</span> remaining;</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p><strong>在公平模式的方法中，增加了一个判断，判断同步队列中是否有等待的线程：</strong></p>
<ul>
<li>有，则插入作为尾节点，线程阻塞；</li>
<li>没有，则参与资源竞争；</li>
</ul>
<p>简而言之，公平模式就是要按等待队列中的顺序获取资源许可。</p>
<h4 id="资源释放：release-方法"><a href="#资源释放：release-方法" class="headerlink" title="资源释放：release()方法"></a>资源释放：release()方法</h4><p>Semaphore调用release()方法释放资源许可，默认释放1个。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span> </span>&#123;</div><div class="line">        sync.releaseShared(<span class="number">1</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>调用AQS的releaseShared()方法：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">boolean</span> <span class="title">releaseShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (tryReleaseShared(arg)) &#123;</div><div class="line">            doReleaseShared();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>调用Sync中重写的tryReleaseShared()方法（<strong>公平与非公平都是调用该方法</strong>），<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> tryReleaseShared(<span class="keyword">int</span> releases) &#123;</div><div class="line">            <span class="keyword">for</span> (;;) &#123;</div><div class="line">                <span class="keyword">int</span> current = getState();</div><div class="line">                <span class="keyword">int</span> <span class="keyword">next</span> = current + releases;</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">next</span> &lt; current) <span class="comment">// overflow</span></div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum permit count exceeded"</span>);</div><div class="line">                <span class="keyword">if</span> (compareAndSetState(current, <span class="keyword">next</span>))</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p><strong>next代表如果许可释放成功，可用资源许可的数量。<br>这里可能有多个线程同时释放，因此利用CAS操作将资源许可数量置为next。<br>释放成功后，进入doReleaseShared()唤醒队列中等待的线程。</strong></p>
<p><strong>注：公平模式与非公平模式都是调用该release()方法。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、Semaphore的概念&quot;&gt;&lt;a href=&quot;#一、Semaphore的概念&quot; class=&quot;headerlink&quot; title=&quot;一、Semaphore的概念&quot;&gt;&lt;/a&gt;一、Semaphore的概念&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Semaphore又叫信号量
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="并发" scheme="http://yoursite.com/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="Semaphore" scheme="http://yoursite.com/tags/Semaphore/"/>
    
  </entry>
  
  <entry>
    <title>Java并发工具类之CyclicBarrier</title>
    <link href="http://yoursite.com/2017/12/08/Java%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%B9%8BCyclicBarrier/"/>
    <id>http://yoursite.com/2017/12/08/Java并发工具类之CyclicBarrier/</id>
    <published>2017-12-08T10:42:18.000Z</published>
    <updated>2018-02-24T18:06:39.939Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、CyclicBarrier的概念"><a href="#一、CyclicBarrier的概念" class="headerlink" title="一、CyclicBarrier的概念"></a>一、CyclicBarrier的概念</h3><p>CyclicBarrier的意思是可循环使用的屏障。<strong>它可以让一组线程到达一个屏障时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有阻塞的线程才会继续执行。</strong></p>
<p>它就好像一道关卡，只有所有的部队（线程）都到了才能放行。</p>
<p><img src="http://osuskkx7k.bkt.clouddn.com/cycle.png" alt="image"></p>
<h3 id="二、CyclicBarrier的实现分析"><a href="#二、CyclicBarrier的实现分析" class="headerlink" title="二、CyclicBarrier的实现分析"></a>二、CyclicBarrier的实现分析</h3><p><strong>部分源码：</strong><br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrier</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition trip = lock.newCondition();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> parties;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Runnable barrierCommand;</div><div class="line">    <span class="keyword">private</span> Generation generation = <span class="keyword">new</span> Generation();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> <span class="keyword">count</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Generation</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> broken = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    ....</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到，<strong>CyclicBarrier是基于ReentrantLock和Condition实现的。</strong></p>
<ul>
<li>parties 表示拦截线程的数量</li>
<li>barrierCommand 表示所有线程到达屏障后优先执行的命令</li>
<li>Generation 表示屏障循环利用</li>
</ul>
<h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>CyclicBarrier有两个构造函数：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">CyclicBarrier</span><span class="params">(<span class="keyword">int</span> parties)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(parties, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">CyclicBarrier</span><span class="params">(<span class="keyword">int</span> parties, Runnable barrierAction)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (parties &lt;= <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</div><div class="line">        <span class="keyword">this</span>.parties = parties;</div><div class="line">        <span class="keyword">this</span>.count = parties;</div><div class="line">        <span class="keyword">this</span>.barrierCommand = barrierAction;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>第一个构造函数调用的其实也是第二个构造函数，只是第二个参数barrierAction为null。这个参数其实是一个线程任务命令，用于在所有线程到达屏障时，优先执行该线程任务，方便处理更加复杂的业务场景。</p>
<h4 id="await-方法："><a href="#await-方法：" class="headerlink" title="await()方法："></a>await()方法：</h4><p>每当一个线程调用await()方法表示该线程到达屏障，</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, BrokenBarrierException </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="function"><span class="keyword">return</span> <span class="title">dowait</span><span class="params">(<span class="keyword">false</span>, <span class="number">0</span>L)</span></span>;</div><div class="line">        &#125; <span class="keyword">catch</span> (TimeoutException toe) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(toe); </div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>进入dowait()方法：</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> dowait(<span class="keyword">boolean</span> timed, <span class="keyword">long</span> nanos)</div><div class="line">        throws InterruptedException, BrokenBarrierException,</div><div class="line">               TimeoutException &#123;</div><div class="line">        <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</div><div class="line">        lock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">final</span> Generation g = generation;</div><div class="line">            </div><div class="line">            <span class="comment">//当前generation“已损坏”，抛出异常</span></div><div class="line">            <span class="keyword">if</span> (g.broken)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BrokenBarrierException();</div><div class="line">                </div><div class="line">            <span class="comment">//如果线程中断，终止CyclicBarrier</span></div><div class="line">            <span class="keyword">if</span> (Thread.interrupted()) &#123;</div><div class="line">                breakBarrier();</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//每当线程进入，计数-1</span></div><div class="line">            <span class="keyword">int</span> <span class="keyword">index</span> = --<span class="keyword">count</span>;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">index</span> == <span class="number">0</span>) &#123;  <span class="comment">//计数为0时，进入</span></div><div class="line">                <span class="keyword">boolean</span> ranAction = <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">final</span> Runnable command = barrierCommand;</div><div class="line">                    <span class="keyword">if</span> (command != <span class="keyword">null</span>)   <span class="comment">//如果有barrierCommand，则优先执行该任务</span></div><div class="line">                        command.run();</div><div class="line">                    ranAction = <span class="keyword">true</span>;</div><div class="line">                    nextGeneration();<span class="comment">//唤醒所有等待线程，并更新generation</span></div><div class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">                &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                    <span class="keyword">if</span> (!ranAction)</div><div class="line">                        breakBarrier();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// loop until tripped, broken, interrupted, or timed out</span></div><div class="line">            <span class="comment">//自旋</span></div><div class="line">            <span class="keyword">for</span> (;;) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">if</span> (!timed)<span class="comment">//如果不是超时等待，则调用Condition.await()方法等待</span></div><div class="line">                        trip.await();</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (nanos &gt; <span class="number">0</span>L)<span class="comment">//超时等待，调用Condition.awaitNanos()方法等待</span></div><div class="line">                        nanos = trip.awaitNanos(nanos);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</div><div class="line">                    <span class="comment">//如果等待过程中，线程被中断，则执行下面的函数。</span></div><div class="line">                    <span class="keyword">if</span> (g == generation &amp;&amp; ! g.broken) &#123;</div><div class="line">                        breakBarrier();</div><div class="line">                        <span class="keyword">throw</span> ie;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                <span class="comment">//当前generation“已损坏”，抛出异常</span></div><div class="line">                <span class="keyword">if</span> (g.broken)</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> BrokenBarrierException();</div><div class="line">                    </div><div class="line">                <span class="comment">//generation已经更新，返回index</span></div><div class="line">                <span class="keyword">if</span> (g != generation)</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">index</span>;</div><div class="line"></div><div class="line">                <span class="comment">//“超时等待”，并且时间已到,终止CyclicBarrier，并抛出异常</span></div><div class="line">                <span class="keyword">if</span> (timed &amp;&amp; nanos &lt;= <span class="number">0</span>L) &#123;</div><div class="line">                    breakBarrier();</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> TimeoutException();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>dowait()的主要处理逻辑如下：如果该线程不是到达的最后一个线程，则它会一直处于等待状态，除非发生以下情况：</p>
<ol>
<li>最后一个线程到达，即index == 0</li>
<li>超出了指定时间（超时等待）</li>
<li>其他的某个线程中断当前线程</li>
<li>其他的某个线程中断另一个等待的线程</li>
<li>其他的某个线程在等待barrier超时</li>
<li>其他的某个线程在此barrier调用reset()方法。reset()方法用于将屏障重置为初始状态。</li>
</ol>
<p>Generation对象描述着CyclicBarrier的更新换代。在CyclicBarrier中，同一批线程属于同一代。当有parties个线程到达barrier，generation就会被更新换代。</p>
<h3 id="三、CyclicBarrier与CountDownLatch的对比"><a href="#三、CyclicBarrier与CountDownLatch的对比" class="headerlink" title="三、CyclicBarrier与CountDownLatch的对比"></a>三、CyclicBarrier与CountDownLatch的对比</h3><p><strong>CyclicBarrier允许一系列线程相互等待对方到达屏障，先到达的线程被阻塞在屏障前，必须等到所有线程都到达了屏障，所有线程才能运行；CountDownLatch允许一个或多个线程等待一些特定的操作完成，而这些操作是在其它的线程中进行的，只有“被等的线程”的操作完成后，“等待的线程”才能执行；</strong></p>
<p><strong>CyclicBarrier强调的是n个线程互相等待，CountDownLatch强调的是1个线程或n个线程等待其他线程操作。</strong></p>
<p><strong>CyclicBarrier的计数器可以循环使用（出现错误可重置计数），CountDownLatch的计数器只能用一次；</strong></p>
<p><strong>CyclicBarrier可以在所有线程到达屏障后先执行一个线程任务，再运行所有线程，用于处理复杂的业务，CountDownLatch不可以。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、CyclicBarrier的概念&quot;&gt;&lt;a href=&quot;#一、CyclicBarrier的概念&quot; class=&quot;headerlink&quot; title=&quot;一、CyclicBarrier的概念&quot;&gt;&lt;/a&gt;一、CyclicBarrier的概念&lt;/h3&gt;&lt;p&gt;Cyclic
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="并发" scheme="http://yoursite.com/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="CyclicBarrier" scheme="http://yoursite.com/tags/CyclicBarrier/"/>
    
  </entry>
  
  <entry>
    <title>Java并发工具类之CountDownLatch</title>
    <link href="http://yoursite.com/2017/12/03/Java%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%B9%8BCountDownLatch/"/>
    <id>http://yoursite.com/2017/12/03/Java并发工具类之CountDownLatch/</id>
    <published>2017-12-03T10:42:18.000Z</published>
    <updated>2018-02-24T18:04:34.623Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h3><p>CountDownLatch也叫闭锁，是并发包的工具类之一，允许一个或多个线程等待其他线程完成操作后再执行。</p>
<p>回忆之前，我们知道Join方法，用于让当前线程等待join的线程执行结束。</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span><span class="comment">(isAlive()</span>)&#123;</div><div class="line">    wait<span class="comment">(0)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其原理就是不停地检查join线程是否存活，如果存活则一直等待。<br>CountDownLatch也可以实现join的功能，且功能更多。  </p>
<p><img src="http://osuskkx7k.bkt.clouddn.com/CountDownLatch.png" alt="image"></p>
<p>CountDownLatch是通过一个计数器来实现的，当new 一个CountDownLatch对象的时候需要传入该计数器值。<br>CountDownLatch有两个最主要的方法await()和countDown()。</p>
<p>当一个线程调用await()时会阻塞；每当一个其他线程完成自己的任务调用countDown()后，计数器的值就会减1。当计数器的值为0时，就表示所有的线程均已经完成了任务，然后阻塞的线程就可以继续执行了。</p>
<h3 id="二、实现分析"><a href="#二、实现分析" class="headerlink" title="二、实现分析"></a>二、实现分析</h3><p><strong>部分源码</strong>：<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatch</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Sync sync;</div><div class="line">    <span class="comment">//内部类Sync（继承AQS）</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</div><div class="line">        Sync(<span class="keyword">int</span> <span class="keyword">count</span>) &#123;</div><div class="line">            setState(<span class="keyword">count</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//重写</span></div><div class="line">        <span class="keyword">protected</span> <span class="keyword">int</span> tryAcquireShared(<span class="keyword">int</span> acquires) &#123;</div><div class="line">            <span class="keyword">return</span> (getState() == <span class="number">0</span>) ? <span class="number">1</span> : <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">protected</span> <span class="keyword">boolean</span> tryReleaseShared(<span class="keyword">int</span> releases) &#123;</div><div class="line">            <span class="keyword">for</span> (;;) &#123;</div><div class="line">                <span class="keyword">int</span> c = getState();</div><div class="line">                <span class="keyword">if</span> (c == <span class="number">0</span>)</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">int</span> nextc = c<span class="number">-1</span>;</div><div class="line">                <span class="keyword">if</span> (compareAndSetState(c, nextc))</div><div class="line">                    <span class="keyword">return</span> nextc == <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//构造方法</span></div><div class="line">     <span class="keyword">public</span> CountDownLatch(<span class="keyword">int</span> <span class="keyword">count</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">count</span> &lt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"count &lt; 0"</span>);</div><div class="line">        <span class="keyword">this</span>.sync = <span class="keyword">new</span> Sync(<span class="keyword">count</span>);</div><div class="line">    &#125;</div><div class="line">    ....</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到，CountDownLatch的实现同样依赖AQS，可见AQS作用之大。<br>观察Sync重写的方法（tryAcquireShared、tryReleaseShared），我们可以断定：<br><strong>CountDownLatch使用的是共享锁。</strong></p>
<h4 id="await-的实现"><a href="#await-的实现" class="headerlink" title="await()的实现"></a>await()的实现</h4><p>调用await()方法会阻塞当前线程，直到计数器为0或被中断。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        sync.acquireSharedInterruptibly(<span class="number">1</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>可以看到，其实调用了AQS的acquireSharedInterruptibly()方法：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">acquireSharedInterruptibly</span><span class="params">(<span class="keyword">int</span> arg)</span></span></div><div class="line">            <span class="keyword">throws</span> InterruptedException &#123;</div><div class="line">        <span class="keyword">if</span> (Thread.interrupted())</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</div><div class="line">        <span class="keyword">if</span> (tryAcquireShared(arg) &lt; <span class="number">0</span>)</div><div class="line">            doAcquireSharedInterruptibly(arg);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>该方法中，如果线程被中断则抛出异常；否则尝试获取锁。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> (getState() == <span class="number">0</span>) ? <span class="number">1</span> : <span class="number">-1</span>;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>尝试获取锁时调用了Sync重写的tryAcquireShared()方法：<br>很简单只有一行代码，但却是CountDownLatch的原理：<strong>如果同步状态为0（计数器值为0）那么返回1，表示获取锁成功；否则返回-1，获取锁失败</strong>，并进入doAcquireSharedInterruptibly()方法：</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">private void doAcquireSharedInterruptibly(int arg)</div><div class="line">        throws InterruptedException &#123;</div><div class="line">        final <span class="keyword">Node</span> <span class="title">node</span> = addWaiter(<span class="keyword">Node</span>.<span class="title">SHARED</span>);</div><div class="line">        boolean failed = <span class="literal">true</span>;</div><div class="line">        try &#123;</div><div class="line">            for (;;) &#123;</div><div class="line">                final <span class="keyword">Node</span> <span class="title">p</span> = <span class="keyword">node</span>.<span class="title">predecessor</span>();</div><div class="line">                if (p == head) &#123;</div><div class="line">                    int r = tryAcquireShared(arg);</div><div class="line">                    //注意r只会等于 <span class="number">0</span> <span class="keyword">or</span> -<span class="number">1</span>；</div><div class="line">                    if (r &gt;= <span class="number">0</span>) &#123;</div><div class="line">                        setHeadAndPropagate(<span class="keyword">node</span><span class="title">, r</span>);</div><div class="line">                        p.next = null; // help GC</div><div class="line">                        failed = <span class="literal">false</span>;</div><div class="line">                        return;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                if (shouldParkAfterFailedAcquire(p, <span class="keyword">node</span><span class="title">) &amp;&amp;</span></div><div class="line">                    parkAndCheckInterrupt())</div><div class="line">                    throw new InterruptedException();</div><div class="line">            &#125;</div><div class="line">        &#125; finally &#123;</div><div class="line">            if (failed)</div><div class="line">                cancelAcquire(<span class="keyword">node</span><span class="title">);</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>该方法在前面共享锁的文章中有提到，它是一个自旋尝试获取锁的方法，这里不再赘述。<strong>注意18行的代码：int r = tryAcquireShared(arg)，在获取同步状态时只会返回两个值0和-1。</strong></p>
<h4 id="countDown-的实现"><a href="#countDown-的实现" class="headerlink" title="countDown()的实现"></a>countDown()的实现</h4><p>每次调用countDown()时，计数器的数量就会减1。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">countDown</span><span class="params">()</span> </span>&#123;</div><div class="line">        sync.releaseShared(<span class="number">1</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>调用的是AQS的releaseShared()方法，释放同步状态：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">boolean</span> <span class="title">releaseShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (tryReleaseShared(arg)) &#123;</div><div class="line">            doReleaseShared();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>进入releaseShared()方法，调用Sync重写的tryReleaseShared()方法：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">boolean</span> <span class="title">tryReleaseShared</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</div><div class="line">            <span class="keyword">for</span> (;;) &#123;</div><div class="line">                <span class="keyword">int</span> c = getState();</div><div class="line">                <span class="keyword">if</span> (c == <span class="number">0</span>)</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">int</span> nextc = c<span class="number">-1</span>;</div><div class="line">                <span class="keyword">if</span> (compareAndSetState(c, nextc))</div><div class="line">                    <span class="keyword">return</span> nextc == <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>可以看到，<strong>该方法自旋CAS操作释放同步状态（可能多个线程同时调用countDown()方法，所以用CAS保证原子性），计数器每次-1，但是直到同步状态为0（计数器为0）时，才返回true</strong>。然后进入doReleaseShared()方法，唤醒阻塞的线程，使其从await()方法退出。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><strong>CountDownLatch的内部实现是共享锁。</strong></p>
<p><strong>创建CountDownLatch时，需要传入计数器的初始值，可以理解为共享锁的总次数。</strong><br><strong>当一个线程调用await()方法，会检查计数器的值，不为0则阻塞直到为0。<br>当其他线程调用countDown()方法时（可以一个线程调用多次），会释放共享状态，计数器-1。</strong><br><strong>当计数器减为0时，阻塞的线程才会运行。</strong></p>
<h3 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h3><p>CountDownLatch的应用场景：<strong>主线程等到N个子线程执行完毕之后，再继续往下执行。</strong> 如跑步比赛统计排名、启动程序等。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchDemo</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="type">CountDownLatch</span> cd = <span class="keyword">new</span> <span class="type">CountDownLatch</span>(<span class="number">5</span>);</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 飞船类</div><div class="line">	 */</div><div class="line">	 <span class="class"><span class="keyword">class</span> <span class="title">Plane</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">		 <span class="meta">@Override</span></div><div class="line">		public void run() &#123;</div><div class="line">			<span class="type">System</span>.out.println(<span class="string">"飞船准备就绪，倒计时5s："</span>);</div><div class="line">			<span class="type">System</span>.out.println(cd.getCount());<span class="comment">//计数器的值</span></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				cd.await();</div><div class="line">			&#125; <span class="keyword">catch</span> (<span class="type">InterruptedException</span> e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			<span class="type">System</span>.out.println(<span class="string">"飞船起飞啦！！！！"</span>);</div><div class="line">		&#125;</div><div class="line">	 &#125;</div><div class="line">	 <span class="comment">/*</span></div><div class="line">	 * 倒计时类</div><div class="line">	 */</div><div class="line">	 <span class="class"><span class="keyword">class</span> <span class="title">Time</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">		 <span class="meta">@Override</span></div><div class="line">		public void run() &#123;</div><div class="line">			 <span class="keyword">for</span>(int i=<span class="number">5</span>;i&gt;<span class="number">0</span>;i--)&#123;</div><div class="line">				 <span class="type">System</span>.out.println(<span class="string">"起飞倒计时："</span>+i+<span class="string">"s"</span>);</div><div class="line">				 cd.countDown();</div><div class="line">			 &#125;</div><div class="line">		&#125;</div><div class="line">	 &#125;</div><div class="line">	</div><div class="line">	public static void main(<span class="type">String</span>[] args) &#123;</div><div class="line">		<span class="type">CountDownLatchDemo</span> cdemo = <span class="keyword">new</span> <span class="type">CountDownLatchDemo</span>();</div><div class="line">		<span class="type">Plane</span> p = cdemo.<span class="keyword">new</span> <span class="type">Plane</span>();</div><div class="line">		p.start();</div><div class="line">		<span class="type">Time</span> t = cdemo.<span class="keyword">new</span> <span class="type">Time</span>();</div><div class="line">		t.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">飞船准备就绪，倒计时<span class="number">5</span>s：</div><div class="line"><span class="number">5</span></div><div class="line">起飞倒计时：<span class="number">5</span>s</div><div class="line">起飞倒计时：<span class="number">4</span>s</div><div class="line">起飞倒计时：<span class="number">3</span>s</div><div class="line">起飞倒计时：<span class="number">2</span>s</div><div class="line">起飞倒计时：<span class="number">1</span>s</div><div class="line">飞船起飞啦！！！！</div></pre></td></tr></table></figure></p>
<p><strong>当调用CountDownLatch的countDown方法时，计数器N就会-1，无论是在多个线程调用，还是一个线程调用多次（上面的例子就是在一个线程中多次调用）。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、概念&quot;&gt;&lt;a href=&quot;#一、概念&quot; class=&quot;headerlink&quot; title=&quot;一、概念&quot;&gt;&lt;/a&gt;一、概念&lt;/h3&gt;&lt;p&gt;CountDownLatch也叫闭锁，是并发包的工具类之一，允许一个或多个线程等待其他线程完成操作后再执行。&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="并发" scheme="http://yoursite.com/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="CountDownLatch" scheme="http://yoursite.com/tags/CountDownLatch/"/>
    
  </entry>
  
</feed>
